<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wonderland</title>
  <icon>https://github.com/waynexia.png</icon>
  
  <link href="https://waynexia.github.io/atom.xml" rel="self"/>
  
  <link href="https://waynexia.github.io/"/>
  <updated>2023-01-02T06:28:43.264Z</updated>
  <id>https://waynexia.github.io/</id>
  
  <author>
    <name>Wayne</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>The Hidden Control Flow</title>
    <link href="https://waynexia.github.io/2022/12/async-cancellation/"/>
    <id>https://waynexia.github.io/2022/12/async-cancellation/</id>
    <published>2022-12-04T16:06:19.000Z</published>
    <updated>2023-01-02T06:28:43.264Z</updated>
    
    <content type="html"><![CDATA[<h1 id="The-Problem"><a href="#The-Problem" class="headerlink" title="The Problem"></a>The Problem</h1><p>This post is talking about a ‚Äúweird‚Äù <a target="_blank" rel="noopener" href="https://github.com/GreptimeTeam/greptimedb/issues/350">problem</a> we encountered in <a target="_blank" rel="noopener" href="https://github.com/GreptimeTeam/greptimedb">GreptimeDB</a>. And, a little spoiler, it‚Äôs about the ‚Äúasync cancellation‚Äù.</p><p>Let‚Äôs first describe the (simplified) scenario. We observed metadata corruption in a long-run test. A series number is duplicated, but it should be increased monotonously. The update logic is very straightforward ‚Äì load value from an in-memory atomic counter, persist the new series number to file, and then update the in-memory counter. The entire procedure is serialized (<code>file</code> is a mutable reference):</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">update_metadata</span></span>(file: &amp;<span class="hljs-keyword">mut</span> File, counter: AtomicU64) -&gt; <span class="hljs-built_in">Result</span>&lt;()&gt; &#123;<br>    <span class="hljs-keyword">let</span> next_number = counter.load(Ordering::Relaxed) + <span class="hljs-number">1</span>;<br>    persist_number(file, number).<span class="hljs-keyword">await</span>?;<br>    counter.fetch_add(<span class="hljs-number">1</span>, Ordering::Relaxed);<br>&#125;<br></code></pre></td></tr></table></figure><p>For some reason, we are not using <code>fetch_add</code> here, though it does work, and if we‚Äôve done so, then the story won‚Äôt happen ü§™ For example, we don‚Äôt want to update the in-memory counter when this procedure fails halfway, like operation <code>persist_number()</code> cannot write to the file. Here the sweet sugar <code>?</code> stands for such a situation. We know clearly that this function call may fail, and if it fails the caller returns early to propagate the error. So we will handle it carefully with that in mind.</p><p>But things become tricky with <code>.await</code>, the hidden control flow comes due to async cancellation.</p><h1 id="Async-Cancellation"><a href="#Async-Cancellation" class="headerlink" title="Async Cancellation"></a>Async Cancellation</h1><h2 id="async-task-and-runtime"><a href="#async-task-and-runtime" class="headerlink" title="async task and runtime"></a>async task and runtime</h2><p>If you have figured out the shape of the ‚Äúcriminal‚Äù, you may want to skip this section. Instead, I‚Äôll start with some pseudocode to show what happens in the ‚Äúawait point‚Äù, and how it interacts with the runtime. First is <code>poll_future</code>, it comes from the <code>Future</code>‚Äòs <a target="_blank" rel="noopener" href="https://doc.rust-lang.org/std/future/trait.Future.html#tymethod.poll"><code>poll</code></a> function, as every <code>async fn</code>‚Äòs we write will be desugared to an anonymous <code>Future</code> implementation.</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">poll_future</span></span>() -&gt; FutureOutput &#123;<br>    <span class="hljs-keyword">match</span> status_of_the_task &#123;<br>        Ready(output) =&gt; &#123;<br>            <span class="hljs-comment">// the task is finished, and we have it output.</span><br>            <span class="hljs-comment">// some logic</span><br>            <span class="hljs-keyword">return</span> our_output;<br>        &#125;,<br>        Pending =&gt; &#123;<br>            <span class="hljs-comment">// it is not ready, we don&#x27;t have the output.</span><br>            <span class="hljs-comment">// thus we cannot make progress and need to wait</span><br>            <span class="hljs-keyword">return</span> Pending;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>async</code> block usually contains other async functions, like <code>update_metadata</code> and <code>persist_number</code>. Say <code>persist_number</code> is a sub-async-task of <code>update_metadata</code>. Each <code>.await</code> point will be expanded to something like <code>poll_future</code> ‚Äì <code>await</code>ing the subtask‚Äôs output and make progress when the subtask is ready. Here we need to wait <code>persist_number</code>‚Äòs task returns <code>Ready</code> before we update the counter, otherwise we cannot do it.</p><p>And the second one is a (toy) runtime, which is in response to poll futures delivered to it. In GreptimeDB we use <a target="_blank" rel="noopener" href="https://docs.rs/tokio/latest/tokio/"><code>tokio</code></a> as our runtime. An async runtime may have tons of features and logic, but the most basic one is to poll: as the name tells, keep running unfinished tasks until they finish (but consider the things I‚Äôm going to write later, the ‚Äúuntil‚Äù might not be a proper word).</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">runtime</span></span>(&amp;<span class="hljs-keyword">self</span>) &#123;<br>    <span class="hljs-keyword">loop</span> &#123;<br>        <span class="hljs-keyword">let</span> future_tasks: <span class="hljs-built_in">Vec</span>&lt;Task&gt; = <span class="hljs-keyword">self</span>.get_tasks();<br>        <span class="hljs-keyword">for</span> task <span class="hljs-keyword">in</span> tasks &#123;<br>            <span class="hljs-keyword">match</span> task.poll_future()&#123;<br>                Ready(output) =&gt; &#123;<br>                    <span class="hljs-comment">// this task is finished. wake it with the result</span><br>                    task.wake(output);<br>                &#125;,<br>                Pending =&gt; &#123;<br>                    <span class="hljs-comment">// this task needs some time to run. poll it later</span><br>                    <span class="hljs-keyword">self</span>.poll_later(task);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>That is it, a very minimalist model of future and runtime. Combining these two functions, you will find that in some aspects, it is just a loop (again, I‚Äôve omitted lots of details to keep tight on the topic; the real world is way more complex). I want to stress the thing that each <code>.await</code> imply one or more function calls (call to <code>poll()</code> or <code>poll_future()</code>). This is the ‚Äúhidden control flow‚Äù in the title and the place cancellation takes effort.</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">run</span></span>() &#123;<br>    <span class="hljs-keyword">loop</span> &#123;<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> Ready(result) = task.poll() &#123;<br>            <span class="hljs-keyword">break</span> result;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Know it is not hard, but thinking about it is not easy (at least for me). I‚Äôve stared at these lines for minutes after I narrow the scope down to as simple as the first code snippet. I know the problem is definitely in the <code>.await</code>. But don‚Äôt know whether too many successful async calls have numbed me or my mental model hasn‚Äôt linked these two points. The bulky garbage, me, spent a whole sleepless night doubting life and the world.</p><h2 id="cancellation"><a href="#cancellation" class="headerlink" title="cancellation"></a>cancellation</h2><p>So far is the standard part. We will then talk about cancellation, which is runtime-dependent. Though many runtimes in rust have similar behavior, this is not a required feature, i.e., a runtime can not support cancellation at all like <a target="_blank" rel="noopener" href="https://github.com/waynexia/texn">this toy</a>. And I‚Äôll take tokio as an example because the story happens there. Other runtimes may be similar.</p><p>In tokio, one can use <a target="_blank" rel="noopener" href="https://docs.rs/tokio/latest/tokio/task/struct.JoinHandle.html#method.abort"><code>JoinHandle::abort()</code></a> to cancel a task. Tasks have a ‚Äúcancel marker bit‚Äù tracks whether it‚Äôs cancelled. And if the runtime finds a task is cancelled, it will kill that task (code from <a target="_blank" rel="noopener" href="https://github.com/tokio-rs/tokio/blob/00bf5ee8a855c28324fa4dff3abf11ba9f562a85/tokio/src/runtime/task/state.rs#L283-L291">here</a>):</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// If the task is running, we mark it as cancelled. The thread</span><br><span class="hljs-comment">// running the task will notice the cancelled bit when it</span><br><span class="hljs-comment">// stops polling and it will kill the task.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// The set_notified() call is not strictly necessary but it will</span><br><span class="hljs-comment">// in some cases let a wake_by_ref call return without having</span><br><span class="hljs-comment">// to perform a compare_exchange.</span><br>snapshot.set_notified();<br>snapshot.set_cancelled();<br></code></pre></td></tr></table></figure><p>The theory behind async cancellation is also elementary. It‚Äôs just the runtime gives up to keep polling your task when it‚Äôs not yet finished, just like <code>?</code> or even tougher because we cannot catch this cancellation like <code>Err</code>. But does it means that we need to take care of every single <code>.await</code>? It would be very annoying. Take this metadata updating as an example. If we have to consider this, we need to check if the file is consistent with the memory state and revert the persisted change if found inconsistency. Well‚Ä¶ ü´† In some aspects, yes. The runtime can literally do anything to your future. But the good thing is that most of them are disciplined.</p><h1 id="Runtime-Behavior"><a href="#Runtime-Behavior" class="headerlink" title="Runtime Behavior"></a>Runtime Behavior</h1><p>This section will discuss what I would expect from a runtime and what we can get for now.</p><h2 id="marker-trait"><a href="#marker-trait" class="headerlink" title="marker trait"></a>marker trait</h2><p>I want the runtime not to cancel my task unconditionally and turn to the type system for help. This is wondering if there is a marker trait like <code>CancelSafe</code>. For the word cancellation safety, tokio has said about it in its <a target="_blank" rel="noopener" href="https://docs.rs/tokio/latest/tokio/macro.select.html#cancellation-safety">documentation</a>:</p><blockquote><p>To determine whether your own methods are cancellation safe, look for the location of uses of  <code>.await</code> . This is because when an asynchronous method is cancelled, that always happens at an  <code>.await</code> . If your function behaves correctly even if it is restarted while waiting at an  <code>.await</code> , then it is cancellation safe.  </p></blockquote><p>That is, whether a task is safe to be cancelled. This is definitely an ‚Äúattribute‚Äù of an async task. You can find that tokio has a long list of what is safe and what isn‚Äôt in the library from the above link. And, in some ways, I think it‚Äôs just like the <a href="jhttps://doc.rust-lang.org/std/panic/trait.UnwindSafe.html"><code>UnwindSafe</code></a> marker. Both are ‚Äú<em>this sort of control flow is not always anticipated</em>‚Äú and ‚Äú<em>has the possibility of causing subtle bugs</em>‚Äú.</p><p>With such a <code>CancelSafe</code> trait, we can tell the runtime if our spawned future is ok to be cancelled, and we promise the ‚Äúcancelling‚Äù control flow is carefully handled. And if without this, means we don‚Äôt want the task to be cancelled. Simple and clear. This is also an approach for the runtimes to require their users (like you and me) to check if their tasks are able to be cancelled. Take <code>timeout()</code> as an example:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">/// The marker trait</span><br><span class="hljs-class"><span class="hljs-keyword">trait</span> <span class="hljs-title">CancelSafe</span></span> &#123;&#125;<br><br><span class="hljs-comment">/// Only cancellable task can be timeout-ed</span><br><span class="hljs-keyword">pub</span> <span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">timeout</span></span>&lt;F&gt;(duration: Duration, future: F) -&gt; Timeout&lt;F&gt; <span class="hljs-keyword">where</span><br>    F: Future + CancelSafe<br>&#123;&#125;<br></code></pre></td></tr></table></figure><h2 id="volunteer-cancel"><a href="#volunteer-cancel" class="headerlink" title="volunteer cancel"></a>volunteer cancel</h2><p>Another approach is to cancel voluntarily. Like the <a target="_blank" rel="noopener" href="https://kotlinlang.org/docs/cancellation-and-timeouts.html#cancellation-is-cooperative">cooperative cancellation in Kotlin</a>, it has an <a target="_blank" rel="noopener" href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/is-active.html"><code>isActive</code></a> method for a task to check if it is cancelled. And this is only a tester method, to cancel or not is fully dependent on the task itself. I paste an example from Kotlin‚Äôs document below, the ‚Äúcooperative cancellation‚Äù happens in line 5. This way brings the ‚Äúhidden control flow‚Äù on the table and makes it more natural to consider and handle the cancellation just like <code>Option</code> or <code>Result</code>.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> startTime = System.currentTimeMillis()<br><span class="hljs-keyword">val</span> job = launch(Dispatchers.Default) &#123;<br>    <span class="hljs-keyword">var</span> nextPrintTime = startTime<br>    <span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> (isActive) &#123; <span class="hljs-comment">// cancellable computation loop</span><br>        <span class="hljs-comment">// print a message twice a second</span><br>        <span class="hljs-keyword">if</span> (System.currentTimeMillis() &gt;= nextPrintTime) &#123;<br>            println(<span class="hljs-string">&quot;job: I&#x27;m sleeping <span class="hljs-subst">$&#123;i++&#125;</span> ...&quot;</span>)<br>            nextPrintTime += <span class="hljs-number">500L</span><br>        &#125;<br>    &#125;<br>&#125;<br>delay(<span class="hljs-number">1300L</span>) <span class="hljs-comment">// delay a bit</span><br>println(<span class="hljs-string">&quot;main: I&#x27;m tired of waiting!&quot;</span>)<br>job.cancelAndJoin() <span class="hljs-comment">// cancels the job and waits for its completion</span><br>println(<span class="hljs-string">&quot;main: Now I can quit.&quot;</span>)<br></code></pre></td></tr></table></figure><p>And this is not hard to achieve in my opinion. Tokio already has the <a target="_blank" rel="noopener" href="https://github.com/tokio-rs/tokio/blob/00bf5ee8a855c28324fa4dff3abf11ba9f562a85/tokio/src/runtime/task/state.rs#L41"><code>Cancelled</code> bit</a> and <a target="_blank" rel="noopener" href="https://docs.rs/tokio-util/latest/tokio_util/sync/struct.CancellationToken.html"><code>CancellationToken</code></a>. But they look a bit different than what I describe. And after all of these, we need runtime to give the cancellation right back to our task. Or the situation might not have big difference.</p><h2 id="explicit-detach"><a href="#explicit-detach" class="headerlink" title="explicit detach"></a>explicit detach</h2><p>Can we force the runtime not to cancel our tasks at present? In tokio we can ‚Äúdetach‚Äù a task to the background by dropping the <code>JoinHandle</code>. A detached task means there is no foreground handle to the spawned task, and in some aspect, others cannot wrap a <code>timeout</code> or <code>select</code> over it, making it un-cancellable. And the problem in the very beginning is solved in this way.</p><blockquote><p>A  <code>JoinHandle</code>  <em>detaches</em> the associated task when it is dropped, which means that there is no longer any handle to the task, and no way to  <code>join</code> on it.  </p></blockquote><p>Though there is the functionality, I would wonder if it‚Äôs better to have an explicit <code>detach</code> method like <a target="_blank" rel="noopener" href="https://docs.rs/glommio/0.7.0/glommio/struct.Task.html#method.detach"><code>glommio&#39;s</code></a>, or even a <code>detach</code> method in the runtime like <code>spawn</code>, which doesn‚Äôt return the <code>JoinHandle</code>. But these are trifles. A runtime usually won‚Äôt cancel a task for no reason, and in most cases, it‚Äôs required by the users. But sometimes you haven‚Äôt noticed that, like those ‚Äúunselect branches‚Äù in <code>select</code>, or the logic in <code>tonic</code>‚Äòs request handler. And if we are sure that a task is ready for cancellation, explicit detach may prevent it from tragedy sometime.</p><h1 id="Back-To-The-Problem"><a href="#Back-To-The-Problem" class="headerlink" title="Back To The Problem"></a>Back To The Problem</h1><p>So far everything is clear. Let‚Äôs start to wipe out this bug! First is, why our future is cancelled? Through the function call graph we can easily find the entire process procedure is executed in-place in <code>tonic</code>‚Äòs request licensing runtime, and it‚Äôs common for an internet request to have a timeout behavior. And the solution is also simple, just detaching the server processing logic into another runtime to prevent it from cancelled with the request. Only <a target="_blank" rel="noopener" href="https://github.com/GreptimeTeam/greptimedb/pull/376/files#diff-9756dcef86f5ba1d60e01e41bf73c65f72039f9aaa057ffd03f3fc2f7dadfbd0R46-R54">a few lines</a>:</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-meta">@@ -30,12 +40,24 @@</span> impl BatchHandler &#123;<br>         &#125;<br>         batch_resp.admins.push(admin_resp);<br><br><span class="hljs-deletion">-        for db_req in batch_req.databases &#123;</span><br><span class="hljs-deletion">-            for obj_expr in db_req.exprs &#123;</span><br><span class="hljs-deletion">-                let object_resp = self.query_handler.do_query(obj_expr).await?;</span><br><span class="hljs-deletion">-                db_resp.results.push(object_resp);</span><br><span class="hljs-addition">+        let (tx, rx) = oneshot::channel();</span><br><span class="hljs-addition">+        let query_handler = self.query_handler.clone();</span><br><span class="hljs-addition">+        let _ = self.runtime.spawn(async move &#123;</span><br><span class="hljs-addition">+            // execute request in another runtime to prevent the execution from being cancelled unexpected by tonic runtime.</span><br><span class="hljs-addition">+            let mut result = vec![];</span><br><span class="hljs-addition">+            for db_req in batch_req.databases &#123;</span><br><span class="hljs-addition">+                for obj_expr in db_req.exprs &#123;</span><br><span class="hljs-addition">+                    let object_resp = query_handler.do_query(obj_expr).await;</span><br><span class="hljs-addition">+</span><br><span class="hljs-addition">+                    result.push(object_resp);</span><br><span class="hljs-addition">+                &#125;</span><br>             &#125;<br></code></pre></td></tr></table></figure><p>Now all fine.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;The-Problem&quot;&gt;&lt;a href=&quot;#The-Problem&quot; class=&quot;headerlink&quot; title=&quot;The Problem&quot;&gt;&lt;/a&gt;The Problem&lt;/h1&gt;&lt;p&gt;This post is talking about a ‚Äúweir</summary>
      
    
    
    
    
    <category term="Rust" scheme="https://waynexia.github.io/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>Paper Reading: CURP protocol</title>
    <link href="https://waynexia.github.io/2022/09/curp-notes/"/>
    <id>https://waynexia.github.io/2022/09/curp-notes/</id>
    <published>2022-09-18T17:58:33.000Z</published>
    <updated>2023-01-02T06:28:43.264Z</updated>
    
    <content type="html"><![CDATA[<p>ËÆ∫ÊñáÂêçÂ≠óÊòØ„ÄäExploiting Commutativity For Practical Fast Replication„Äã</p><p>CURPÂÖ®Áß∞Consistent Unordered Replication ProtocolÔºå‰∏ªË¶ÅÊòØÂà©Áî®Êìç‰Ωú‰πãÈó¥ÁöÑÁõ∏ÂÖ≥ÊÄßÔºàCommutativeÔºâÊù•ÂÆûÁé∞Â±ÄÈÉ®‰π±Â∫èÊèê‰∫§ÁöÑÂçèËÆÆ„ÄÇËøôÈáåCommutativeÊåáÁöÑÊòØ‰∏çÂêåÊìç‰ΩúËÆ∞ÂΩï‰πãÈó¥ÊòØÂê¶ÂèØ‰ª•‰∫§Êç¢ÊâßË°åÈ°∫Â∫èËÄå‰∏çÂΩ±ÂìçÊúÄÁªàÁªìÊûúÔºåÊØîÂ¶Ç<code>x=1</code>„ÄÅ<code>y=2</code>Âíå<code>x=3</code>‰∏âÊù°ËÆ∞ÂΩï‰∏≠<code>y=2</code>‰∏éÂÖ∂‰ªñ‰∏§Êù°ÈÉΩÊòØÊó†ÂÖ≥ÁöÑÔºåÊª°Ë∂≥CommutativeÂèØ‰ª•‰π±Â∫èÊâßË°åÔºåËÄå<code>x=1</code>‰∏é<code>x=3</code>‰πãÈó¥ÊúâÂÖ≥Á≥ªÔºåÈúÄË¶Å‰∏Ä‰∏™Á°ÆÂÆöÁöÑÊâßË°åÈ°∫Â∫è„ÄÇ</p><p>Áõ∏ÊØî‰∫éÂÖ∂‰ªñÁöÑÂ§çÂà∂ÂçèËÆÆÔºåCURPÁöÑÁâπÁÇπÊòØÂØπ‰∫éÊª°Ë∂≥CommutativeÁöÑËÆ∞ÂΩïÂèØ‰ª•‰ª•1 RTTÁöÑÂª∂Êó∂ÂÆåÊàêÊèê‰∫§„ÄÇ</p><h1 id="ÈõÜÁæ§ËßíËâ≤"><a href="#ÈõÜÁæ§ËßíËâ≤" class="headerlink" title="ÈõÜÁæ§ËßíËâ≤"></a>ÈõÜÁæ§ËßíËâ≤</h1><p>Èô§‰∫ÜÂ∏∏ËßÅÁöÑ<code>Client</code>Ôºå<code>Leader</code>Ôºå<code>Backup</code>‰πãÂ§ñCRUP‰∏≠ËøòÂºïÂÖ•‰∫Ü‰∏Ä‰∏™Êñ∞ÁöÑ<code>Witness</code>ËßíËâ≤„ÄÇÁÆÄÂçïÊ¶ÇÊã¨‰∏Ä‰∏ãËøô‰∫õËßíËâ≤Ôºö</p><ul><li><code>Client</code><ul><li>‰∏é<code>Witness</code>Âíå<code>Leader</code>‰∫§‰∫íÔºåÂØπ<code>Witness</code>ÁöÑÈÄö‰ø°ÊòØÂπøÊí≠ÁöÑÂΩ¢Âºè(ÂêåÊó∂‰∏éÊâÄÊúâ<code>Witness</code>ÈÄö‰ø°)  </li><li>Ëá™Â∑±‰πüÊúâ‰∏ÄÂÆöÁöÑÁä∂ÊÄÅÔºå‰∏ªË¶ÅÊòØÂÖ≥‰∫éÊìç‰ΩúÁöÑÊâßË°åÊÉÖÂÜµÁöÑ„ÄÇ</li></ul></li><li><code>Witness</code>  <ul><li>CURPÂçèËÆÆÂÆö‰πâÁöÑËßíËâ≤ÔºåÂ≠òÂú®Â§çÊï∞‰∏™ÂÆû‰æãÔºå‰∏îÂÆû‰æã‰πãÈó¥ÂØπÁ≠â  </li><li>ÊúâÂ≠òÂÇ®ËÉΩÂäõÊù•‰∏¥Êó∂Â≠òÂÇ®ËøëÊúüÁöÑÊìç‰ΩúËÆ∞ÂΩïÔºå‰ΩÜ‰∏çÈúÄË¶ÅÁª¥Êä§Áä∂ÊÄÅÊú∫ÔºàÊìç‰ΩúÁªìÊûúÔºâÔºåÂ∞±ÊòØ‰∏Ä‰∏™WAL</li><li>ÈúÄË¶ÅÊÑüÁü•ÂÖ∑‰ΩìÁöÑÊìç‰ΩúÂÜÖÂÆπÂπ∂Âà§Êñ≠Êìç‰Ωú‰πãÈó¥ÊòØÂê¶ÊúâÂèØ‰∫§Êç¢ÊÄß(commutative)  </li><li>ÂÆû‰æãÈó¥Áã¨Á´ãËøê‰ΩúÂèäÂÜ≥Á≠ñÔºå‰πüÁã¨Á´ã‰∫é<code>Leader</code>/<code>Backup</code>„ÄÇ</li></ul></li><li><code>Leader</code><ul><li>ÈõÜÁæ§‰∏ªËäÇÁÇπÔºåÊúâÂÖ∂‰ªñ‰∏ªÂ§áÂçèËÆÆ‰∏≠Â∏∏ËßÅÁöÑ<code>Leader</code>ÁöÑËÉΩÂäõ(Áª¥Êä§Áä∂ÊÄÅÊú∫ÔºåÁ≠îÂ§çËØªÂÜôËØ∑Ê±ÇÔºåÊï∞ÊçÆÂêåÊ≠•Á≠â)  </li><li>ÂêåÊ†∑ÈúÄË¶ÅÊÑüÁü•ÂÖ∑‰ΩìÊìç‰ΩúÂπ∂Âà§Êñ≠ÂèØ‰∫§Êç¢ÊÄß</li><li>ÂèØ‰ª•Âú®ÊääÊìç‰ΩúÂêåÊ≠•Áªô<code>Backup</code>‰πãÂâçÁ≠îÂ§çËØ∑Ê±Ç</li><li>ËÆ∫Êñá‰∏≠Âè´<code>Master</code></li></ul></li><li><code>Backup</code><ul><li>ÊôÆÈÄöÁöÑbackupËßíËâ≤</li></ul></li></ul><p>Âú®ËÆ∫ÊñáÁöÑÊ≠£ÊñáÈÉ®ÂàÜ‰∏≠<code>Witness</code>ÈÉΩÊòØ‰Ωú‰∏∫‰∏Ä‰∏™Áã¨Á´ãÁöÑÈÉ®ÁΩ≤ÂÆû‰æãÊù•ËÆ®ËÆ∫ÁöÑÔºå‰∏çËøáÈôÑÂΩïÈáå‰πüÊèêÂà∞ÂÆûË∑µ‰∏≠‰πüÊ≤°ÂøÖË¶ÅÂ∞Ü<code>Witness</code>ÂçïÁã¨ÈÉ®ÁΩ≤ÔºåËÄåÊòØË∑üÁùÄ<code>Leader</code>/<code>Backup</code>‰∏ÄËµ∑Ëøê‰ΩúÔºåÂè™‰Ωú‰∏∫ÈÄªËæë‰∏äÁöÑ‰∏Ä‰∏™Áã¨Á´ãÂçïÂÖÉ„ÄÇÊâÄ‰ª•‰∏Ä‰∫õRPCËØ∑Ê±ÇÂÆûÈôÖ‰∏äÊòØÂèØ‰ª•ÂêàÂπ∂ÔºàÊØîÂ¶Ç<code>Client</code>ÂêåÊó∂ËØ∑Ê±Ç<code>Leader</code>Âíå‰∏éÂÖ∂Âú®‰∏ÄËµ∑ÁöÑ<code>Witness</code>ÔºâÊàñËÄÖÊòØÊú¨Âú∞IPCÔºàÊØîÂ¶Ç<code>Leader</code>/<code>Backup</code>ËØ∑Ê±ÇÂØπÂ∫îÁöÑ<code>Witness</code>ÔºâÁöÑ„ÄÇÂõ†Ê≠§ÂØπ‰∫éÂÆûÈôÖ‰ΩøÁî®ÁöÑÊó∂ÂÄôÊù•ËØ¥<code>Witness</code>Êõ¥ÂÉèÊòØCURPÂºïÂÖ•ÁöÑÊñ∞Êú∫Âà∂ÁöÑ‰∏Ä‰∏™Ê¶ÇÊã¨ÊäΩË±°„ÄÇ</p><h1 id="Âü∫Êú¨Êìç‰Ωú"><a href="#Âü∫Êú¨Êìç‰Ωú" class="headerlink" title="Âü∫Êú¨Êìç‰Ωú"></a>Âü∫Êú¨Êìç‰Ωú</h1><p>ÂçèËÆÆÁöÑÂÖ∑‰ΩìÂÜÖÂÆπÂèØ‰ª•‰ªéÂá†‰∏™Âü∫Êú¨Êìç‰ΩúÊù•ËØ¥Êòé</p><h2 id="Êõ¥Êñ∞"><a href="#Êõ¥Êñ∞" class="headerlink" title="Êõ¥Êñ∞"></a>Êõ¥Êñ∞</h2><p>Áî±<code>Client</code>ÂèëËµ∑Ôºå<code>Client</code>ÂêåÊó∂ÂØπ<code>Leader</code>Âèä<strong>ÊâÄÊúâ</strong><code>Witnesses</code>ÂèëÂá∫ËØ∑Ê±ÇÔºåÊ†πÊçÆËøô‰∏™ËØ∑Ê±Ç‰∏é‰πãÂâçÁöÑËØ∑Ê±ÇÊòØÂê¶Êó†ÂÖ≥(ÂèØ‰∫§Êç¢Ôºåcommutative)Êúâ‰∏§ÁßçÊÉÖÂÜµÔºö  </p><ul><li>Â¶ÇÊûúÊó†ÂÖ≥ÔºåÈÇ£‰πà<code>Leader</code>Âíå<strong>ÊâÄÊúâ</strong><code>Witnesses</code>ÈÉΩ‰ºöacceptËøô‰∏™ËØ∑Ê±Ç„ÄÇ<code>Client</code>Âú®Êî∂Âà∞<strong>ÂÖ®ÈÉ®</strong>ÁöÑacceptÁ≠îÂ§ç‰πãÂêéÂèØ‰ª•ÂΩìËøô‰∏™ËØ∑Ê±ÇÂ∑≤ÂÆåÊàê„ÄÇ</li><li>Â¶ÇÊûú<code>Leader</code>Êàñ‰ªªÊÑè‰∏Ä‰∏™ <code>Witness</code> ËÆ§‰∏∫ÊúâÂÖ≥(not commutative)Ôºå<code>Client</code>ÈÉΩÈúÄË¶ÅË¶ÅÊ±Ç<code>Leader</code>ËøõË°å‰∏ÄÊ¨°syncÔºåÂ∞ÜÁä∂ÊÄÅ‰∏é<code>Backups</code>ËøõË°åÂêåÊ≠•ÂêéÁ≠îÂ§ç<code>Client</code>„ÄÇ<code>Client</code>ÂèØ‰ª•‰æùÊçÆËøô‰∏™syncËØ∑Ê±ÇÁöÑÁ≠îÂ§çÂ∞ÜËØ∑Ê±ÇÂÆåÊàêÔºåËøôÁßçÊÉÖÂÜµ‰∏ã<code>Witness</code>ÁöÑÁ≠îÂ§çÊ≤°ÊúâÂΩ±Âìç„ÄÇ</li></ul><p>‰πüÂ∞±ÊòØËØ¥Ôºå‰∏ÄÊ¨°Êìç‰Ωú‰ªé<code>Client</code>ÂèëËµ∑Âà∞ÂÆåÊàê‰∏ÄÂÖ±Êúâ‰∏â‰∏™Áä∂ÊÄÅÔºö<code>Proposed</code>Ôºå<code>Unsynced</code>Âíå<code>Synced</code>„ÄÇ<code>Client</code>‰ºöÂØπÈô§‰∫Ü<code>Backup</code>‰πãÂ§ñÁöÑÊâÄÊúâËäÇÁÇπÂèëËµ∑ËØ∑Ê±ÇÔºåÂú®‰∏äÈù¢ÁöÑÁ¨¨‰∏ÄÁßçÊÉÖÂÜµ‰∏ãÊàê‰∏∫<code>Unsynced</code>ÔºåÊ≠§Êó∂<code>Client</code>Â∑≤ÁªèÂèØ‰ª•ËÆ§‰∏∫ËØ•Êìç‰ΩúÂÆåÊàêÔºå<code>Leader</code>‰πüÂèØ‰ª•ÊääÊìç‰ΩúÂ∫îÁî®Âà∞Áä∂ÊÄÅÊú∫‰∏ä„ÄÇ<code>Leader</code>Â∫îÁî®<code>Unsynced</code>Êìç‰ΩúÁöÑËøáÁ®ãÂè´ÂÅö‚ÄúÊé®ÊµãÊâßË°åÔºàspeculative executionÔºâ‚Äù„ÄÇ<code>Unsynced</code>ÁöÑÊìç‰Ωú‰ºöÂú®‰∏Ä‰∏ãÊ¨°Êî∂Âà∞syncËØ∑Ê±ÇÊó∂ÂæÄ<code>Backups</code>ËøõË°åÂêåÊ≠•ÔºåÂêåÊ≠•ÂÆåÊàêÁöÑÊìç‰ΩúÁß∞‰∏∫<code>Synced</code>„ÄÇËÄåÂú®‰∏äÈù¢ÁöÑÁ¨¨‰∫åÁßçÊÉÖÂÜµ‰∏ãÊìç‰Ωú‰ºöË∑≥Ëøá<code>Unsynced</code>Ëøô‰∏ÄÊ≠•„ÄÇ</p><p>‰ΩÜÊòØ‰ªé<code>Leader</code>ËßÜËßíÁúã‰∏Ä‰∏™Êìç‰ΩúÂè™Ë¶Å<code>Leader</code>ËÆ§‰∏∫ÊòØcommutativeÁöÑÂÆÉÂ∞±‰ºöÂ∫îÁî®Âà∞Áä∂ÊÄÅÊú∫Ôºå‰ΩÜËøô‰∏™Êìç‰ΩúÂèØËÉΩ‰ºöË¢´<code>Witness</code>ÊãíÁªùÔºàËÆ§‰∏∫ÊòØnot commutativeÔºâ„ÄÇËøôÊó∂ÂÄôÈúÄË¶Å‰æùËµñ<code>Client</code>Êù•ÂèëËµ∑syncËØ∑Ê±ÇÔºåË¶ÅÊ±Ç<code>Leader</code>‰∏é<code>Backups</code>ËøõË°åÂêåÊ≠•„ÄÇ</p><h2 id="Leader-ÊïÖÈöúÊÅ¢Â§ç"><a href="#Leader-ÊïÖÈöúÊÅ¢Â§ç" class="headerlink" title="Leader ÊïÖÈöúÊÅ¢Â§ç"></a>Leader ÊïÖÈöúÊÅ¢Â§ç</h2><p>Êñ∞ <code>Leader</code> ÁöÑ‰∫ßÁîü/ÊÅ¢Â§çÊúâ‰∏§Ê≠•ÔºåÈ¶ñÂÖàÂêåÊ≠• <code>Backup</code> ÁöÑÁä∂ÊÄÅÔºåÁÑ∂ÂêéÈöè‰æøÊåë‰∏Ä‰∏™ <code>Witness</code> Êù•ÈáçÊîæÊ≤°ÂêåÊ≠•Âà∞ <code>Backup</code> ‰∏≠ÁöÑÊìç‰Ωú„ÄÇ</p><p>ÂêåÊ≠•<code>Backup</code>Áä∂ÊÄÅÂ∞±Ëé∑Âæó‰∫ÜÊâÄÊúâ<code>Synced</code>ÁöÑÊìç‰ΩúÔºåËÄå‰ªé‰∏äÈù¢ÁöÑÊõ¥Êñ∞ÊµÅÁ®ãÂèØ‰ª•Áü•ÈÅì<code>Unsynced</code>ÁöÑÊìç‰ΩúÂ≠òÂú®‰∫é<strong>ÂÖ®ÈÉ®</strong>ÁöÑ<code>Witnesses</code>‰∏≠ÔºåÊâÄ‰ª•ËøôÈáåÈöè‰æøÊåë‰∏Ä‰∏™ <code>Witness</code> ÈÉΩÊúâÂÖ®ÈÉ®ÊâÄÈúÄÁöÑ‰ø°ÊÅØ„ÄÇÂè¶Â§ñ<code>Unsynced</code>Êìç‰ΩúÂú®‰∏çÂêåÁöÑ<code>Witnesses</code>‰∏äÊâÄÊèê‰∫§ÁöÑÈ°∫Â∫èÂèØËÉΩ‰∏ç‰∏ÄÊ†∑ÔºåÊâÄ‰ª•CURPË¶ÅÊ±ÇÂè™ÊúâÊª°Ë∂≥commutativeÂèØ‰ª•‰π±Â∫èÊâßË°åÁöÑÊìç‰ΩúÊâçÂèØ‰ª•Êé®ÊµãÊâßË°å„ÄÇ</p><p>Âè¶Â§ñËøòÈúÄË¶ÅËß£ÂÜ≥<code>Backup</code>Âíå<code>Witness</code>ÂèØËÉΩÂ≠òÂú®ÈáçÂ§çËÆ∞ÂΩïÁöÑÈóÆÈ¢òÔºåÂ¶ÇÊûúÂ∞ÜÂ∑≤ÁªèÊòØ<code>Synced</code>ÁöÑÊìç‰ΩúÂÜçËøõË°åÈáçÊîæÊòØ‰ºöÂØºËá¥Áä∂ÊÄÅÈîôËØØÁöÑ„ÄÇÂõ†Ê≠§CURPÈúÄË¶Å‰øùËØÅÊØè‰∏™Êìç‰ΩúÂè™ËÉΩÊâßË°å‰∏ÄÊ¨°ÔºåÁÆÄÂçïÊù•ËØ¥Â∞±ÊòØËÆ©<code>Client</code>ÁªôÊØè‰∏™Êìç‰ΩúÂä†‰∏ä‰∏Ä‰∏™<code>RPC ID</code>„ÄÇ</p><blockquote><p>To avoid duplicate executions of the requests that are already replicated to backups, CURP relies on exactly-once semantics provided by RIFL, which detects already executed client requests and avoids their re-execution</p></blockquote><p>ÂΩìÁÑ∂Â¶ÇÊûúÊòØ‰∏Ä‰∏™ <code>Backup</code> Êàê‰∏∫Êñ∞ <code>Leader</code> Â∞±ÂèØ‰ª•Ë∑≥ËøáÁ¨¨‰∏ÄÊ≠•„ÄÇ</p><h2 id="ËØªÂèñ"><a href="#ËØªÂèñ" class="headerlink" title="ËØªÂèñ"></a>ËØªÂèñ</h2><p><code>Client</code> ÂèØ‰ª•Áõ¥Êé•‰ªé <code>Leader</code> ËØªÔºå‰∏çËøáÈúÄË¶ÅËøôÊ¨°ËØªÊìç‰Ωú‰πü‰∏éÂÖ∂‰ªñ <code>Unsynced</code> ÁöÑÊìç‰ΩúÊó†ÂÖ≥ÔºåÂê¶ÂàôÈúÄË¶ÅÂÖà sync ‰∏Ä‰∏ãÔºåÂõ†‰∏∫ÂØπÂêå‰∏Ä‰∏™ÂÜÖÂÆπÁöÑËØªÂíåÂÜôÊìç‰ΩúÊòØÊó†Ê≥ï‰π±Â∫èÊâßË°åÁöÑ„ÄÇËÄåÂú®<code>Leader</code>ËßÜËßíÁúãÔºåÊé®ÊµãÊâßË°åÁöÑÊìç‰Ωú‰∏ç‰∏ÄÂÆöÂú®ÈáçÂêØ/ÂèòÊõ¥Leader‰πãÂêéËøòÂ≠òÂú®ÔºàÂú®<code>Leader</code>Â∫îÁî®Âà∞Áä∂ÊÄÅÊú∫ÂêéÔºå‰ΩÜÊòØË¢´<code>Witnesses</code>ËÆ∞ÂΩï‰∏ãÊù•‰πãÂâçÂèëÁîücrashÔºâÔºåÊâÄ‰ª•ËØªÊé®ÊµãÊâßË°åÁöÑÂÜÖÂÆπ‰πüÈúÄË¶ÅÊ£ÄÊü•commutative„ÄÇÊâÄ‰ª•ËøôÁßçËØªÊìç‰Ωú‰∏éÊõ¥Êñ∞Êìç‰ΩúÁöÑÂå∫Âà´Âè™Êúâ(1)‰∏çÊ∂âÂèä <code>Witness</code> (2)‰∏ç‰ºöÂΩ±Âìç <code>Leader</code> ÁöÑÁä∂ÊÄÅÊú∫ÔºåÂõ†Ê≠§‰∏çÈúÄË¶ÅË¢´ËÆ∞ÂΩï„ÄÇ</p><p><code>Client</code> ‰πüÂèØ‰ª•‰ªé <code>Backup</code> ËØªÔºå‰∏çËøáËØª‰πãÂâçÈúÄË¶ÅÂÖàÂêë‰∏Ä‰∏™ <code>Witness</code> ËØ¢ÈóÆËøô‰∏™Êìç‰ΩúÊòØÂê¶ commutative„ÄÇÂè™ÊúâÂú®ÂæóÂà∞ËÇØÂÆöÁ≠îÂ§çÁöÑÊÉÖÂÜµ‰∏ãÊâçÂèØ‰ª•ËØª <code>Backup</code>ÔºåÂê¶ÂàôËøòÊòØÂè™ËÉΩ‰ªé <code>Leader</code> ËØª„ÄÇÂâçÈù¢Ë¶ÅÊ±Ç‰∏Ä‰∏™Êìç‰ΩúË¢´ËÆ∞ÂΩïÂà∞ÊâÄÊúâ <code>Witnesses</code> ‰πüËÄÉËôëÂà∞‰∫ÜËøôÈáåËÉΩÂ§üÈöèÊÑèËØ∑Ê±Ç <code>Witness</code> Êù•ËØ¢ÈóÆ commutative„ÄÇ</p><p>ÂêåÊó∂Âõ†‰∏∫<code>Backups</code>‰πãÈó¥ÁöÑÁä∂ÊÄÅÂèØËÉΩÂõ†‰∏∫ÂêåÊ≠•ËøõÂ∫¶‰∏çÂêåËÄåÂá∫Áé∞Â∑ÆÂºÇÔºå‰∏∫‰∫Ü‰ªé‰ªªÊÑè‰∏Ä‰∏™ <code>Backup</code> ÈÉΩËÉΩËØªÂà∞ÂêåÊ†∑ÁöÑÁªìÊûúÔºå<code>Backups</code> ‰πãÈó¥ËøòÈúÄË¶ÅÊÑüÁü•‰∫íÁõ∏ÁöÑÂêåÊ≠•Áä∂ÊÄÅ(Âç≥‰∏Ä‰∏™Êìç‰ΩúÊòØÂê¶Ë¢´ÊâÄÊúâÁöÑ <code>Backups</code> ÂêåÊ≠•ÂÆåÊàê)„ÄÇ</p><blockquote><p>even if a value is replicated to some of backups, the value may get lost if the master crashes and a new master recovers from a backup that didn‚Äôt receive the new value. A simple solution for this problem is that backups don‚Äôt allow reading values that are not yet fully replicated to all backups.</p></blockquote><h2 id="GC"><a href="#GC" class="headerlink" title="GC"></a>GC</h2><p>ËøôÈáåËÆ®ËÆ∫<code>Witness&#39; records</code>Âíå<code>RPC ID</code>‰∏§‰∏™ËµÑÊ∫êÁöÑÂõûÊî∂„ÄÇ</p><p>‰ªéÂâçÈù¢ÂèØÁü•Ôºå<code>Witness</code> Âè™ÊúâÂú®Êñ∞ËÆ∞ÂΩï‰∏éÁé∞Âú®ÊâÄÊúâËÆ∞ÂΩïÈÉΩÊó†ÂÖ≥ÁöÑÊÉÖÂÜµ‰∏ãÊâçËÉΩ accept„ÄÇÊâÄ‰ª•‰∏∫‰∫ÜÊèêÈ´òÊàêÂäüÁéá <code>Witness</code> ÂøÖÈ°ªÂ∞ΩÂø´‰∏¢Êéâ‰∏çÂøÖË¶ÅÁöÑÊï∞ÊçÆ(Ë¢´ <code>Leader</code> ÂêåÊ≠•Âà∞‰∫Ü <code>Backups</code> ‰∏äÔºåÂç≥syncedÁöÑÊï∞ÊçÆ)„ÄÇÂú® CURP ‰∏≠ <code>Leader</code> ‰ºöÁªô <code>Witness</code> Âèë GC Êåá‰ª§ÔºåÂëäËØâ <code>Witness</code> Âì™‰∫õÊìç‰ΩúÂ∑≤ÁªèÂÆåÊàê‰∫ÜÂêåÊ≠•Âπ∂ÂèØ‰ª•‰∏¢ÂºÉ„ÄÇ</p><p>Âú® <code>Witness GC</code> ÂíåÊõ¥‰πãÂâçÁöÑÊïÖÈöúÊÅ¢Â§çÁéØËäÇÈÉΩÈúÄË¶ÅÂØπÊìç‰ΩúËÆ∞ÂΩïËøõË°åÊ†áËØÜÔºåCPUP ‰ΩøÁî®ÁöÑÊòØ <code>RIFL</code> ‰∏≠ÁöÑ <code>RPC ID</code> Êù•ÂÆåÊàê„ÄÇÂõ†‰∏∫Ëøô‰∏™ ID ÊòØ Client ÂàÜÈÖçÁöÑÔºåÊâÄ‰ª•Êó†Ê≥ï‰ΩøÁî®Á¥ØËøõÁ°ÆËÆ§ÁöÑÊñπÂºèËÄåÂøÖÈ°ªÂØπÊØè‰∏™ ID ÈÉΩËøõË°åËÆ∞ÂΩï„ÄÇÊ≠§Â§ñ CURP ËøòÂØπ <code>RIFL</code> ÂÅö‰∫Ü‰∏Ä‰∫õÊîπÂä®ÔºåÂú®ËÆ∫ÊñáÁöÑ <em>ÈôÑÂΩï¬ßC.1</em> ËäÇÊúâÂ±ïÂºÄÔºå‰∏ªË¶ÅÊòØ‰∏∫‰∫ÜÈÄÇÈÖç Witness Êèê‰æõÁöÑ Recovery„ÄÇ</p><h1 id="ËøõÈò∂Êìç‰Ωú"><a href="#ËøõÈò∂Êìç‰Ωú" class="headerlink" title="ËøõÈò∂Êìç‰Ωú"></a>ËøõÈò∂Êìç‰Ωú</h1><p>‰ªéÊõ¥Êñ∞Êìç‰ΩúÁöÑÊ≠•È™§ÂèØ‰ª•ÁúãÂà∞ <code>Client</code> Âêë <code>Witnesses</code> ÂÜôÊï∞ÊçÆ‰ª•Âèä <code>Leader</code> Âêë <code>Backups</code> ÂêåÊ≠•Áä∂ÊÄÅÈÉΩÊòØÊúâÂÖ®ÂêåÊ≠•ÁöÑË¶ÅÊ±ÇÁöÑÔºåÂç≥Ë¶ÅÊ±ÇÊâÄÊúâÁöÑËØ∑Ê±ÇÂØπË±°ÈÉΩÂÆåÊàêÊâçËÉΩÁÆóÂÆåÊàêÔºåËÄåÂêéÈù¢ÁöÑÊïÖÈöúÊÅ¢Â§çÂíåËØªÂèñÊìç‰Ωú‰πüÈÉΩÁî®Âà∞‰∫ÜËøô‰∏ÄÁÇπ„ÄÇ</p><p>ËøôÊ†∑Êìç‰ΩúÂú®ÁΩëÁªúÂàÜÂå∫ÊàñËÄÖÂçïËäÇÁÇπÂ§ÑÁêÜÊÖ¢‰πãÁ±ªÊÉÖÂÜµ‰∏ãÁöÑÂèØÁî®ÊÄßÂíåÊÄßËÉΩÊòØÊØîËæÉËÆ©‰∫∫ÊãÖÂøÉÁöÑ„ÄÇËÆ∫ÊñáÂú®ÈôÑÂΩïËøòÂ±ïÂºÄ‰∫ÜÂè¶‰∏ÄÁßçÊñπÊ≥ïÔºåÂèØ‰ª•ËÆ© <code>Client</code> Âêë <code>Witnesses</code> ÂÜôÊï∞ÊçÆÊó∂Âè™ÂæóÂà∞<em>Ë∂ÖÂ§ßÂ§öÊï∞(superquorum)</em> <code>Witnesses</code> ÁöÑÁ≠îÂ§çÂ∞±Ë°å„ÄÇËøôÈáå‚ÄúË∂ÖÂ§ßÂ§öÊï∞‚ÄùÁöÑËÆ°ÁÆóÊñπÂºèÊòØ $$superquorum=f+\lceil f/2 \rceil + 1$$ÔºåÂÖ∂‰∏≠<code>f</code>ÊòØËÉΩÂÆπÂøçÂ§öÂ∞ëËäÇÁÇπÊåÇÊéâÁöÑÊï∞Èáè„ÄÇËøôÈáåÊØî‰º†ÁªüÂ§öÊï∞Ê¥æËøòÂ§ö‰∫Ü‰∏Ä‰∏™‚ÄúÂ∞ëÊï∞Ê¥æÁöÑÂ§ßÂ§öÊï∞‚ÄùÁöÑÂéüÂõ†ÊòØ‰∏∫‰∫ÜÊïÖÈöúÊÅ¢Â§çÊó∂Ââ©‰∏ãÁöÑ <code>Witnesses</code> ‰πãÈó¥ËøòËÉΩ‰øùÊåÅÂ§öÊï∞Ê¥æ„ÄÇ</p><blockquote><p>The reason why CURP needs a superquorum instead of a simple majority is to ensure commutativity of replays from witnesses during recovery</p></blockquote><p>ËÄåÁõ∏Â∫îÁöÑÔºå<code>Leader</code>Âú®ÊÅ¢Â§çÁöÑÊó∂ÂÄô‰ª•Âèä<code>Client</code>Âú®ËØª<code>Backup</code>‰πãÂâçÊü•ËØ¢ÁöÑÊó∂ÂÄôÈÉΩÈúÄË¶ÅÊî∂ÈõÜÂ§öÊï∞Ê¥æ<code>Witnesses</code>ÁöÑÁªìÊûú„ÄÇÂÖ∂ÂÆûÂ∞±ÊòØÁâ∫Áâ≤‰∫Ü‰∏Ä‰∫õËØªÊó∂ÁöÑ‰æøÂà©ÊÄßÊù•‰ºòÂåñÂÜôÁöÑÊìç‰Ωú„ÄÇ</p><p>Ê≠§Â§ñ <code>Leader</code> Âêë <code>Backups</code> ÂêåÊ≠•Êï∞ÊçÆ‰πüÊòØÁ±ª‰ººÔºåÂè™Ë¶ÅÂêåÊ≠•Âà∞Â§öÊï∞Ê¥æ‰∏äÔºåÂú®ÊÅ¢Â§çÁöÑÊó∂ÂÄôÈÄâÊúÄÊñ∞ÁöÑ„ÄÇÂú® <code>Client</code> ËØª <code>Backup</code> ÁöÑÊó∂ÂÄô‰πüÈÄâÂ§öÊï∞Ê¥æÂíåÊúÄÊñ∞‰ªªÊúüÔºåÁ±ª‰ºº Raft ÁöÑÈÇ£‰∏ÄÂ•óÊìç‰Ωú„ÄÇ</p><h1 id="‰∏Ä‰∫õËØÅÊòé"><a href="#‰∏Ä‰∫õËØÅÊòé" class="headerlink" title="‰∏Ä‰∫õËØÅÊòé"></a>‰∏Ä‰∫õËØÅÊòé</h1><p>ËÆ∫ÊñáÂú® <em>ÈôÑÂΩï¬ßA</em> ÈáåÈù¢ÁÆÄÂçïËØÅÊòé‰∫Ü‰∏Ä‰∏ã <code>Durability</code>, <code>Consistency</code> Âíå <code>Linearizability</code> Âá†‰∏™ÂÖ≥ÈîÆÁâπÊÄßÔºå‰∏çËøáÈÉΩÊòØÂü∫‰∫éÂü∫Êú¨Êìç‰ΩúÁöÑÁâàÊú¨ÔºàÂÖ®ÂêåÊ≠•ÂÜôÔºâ„ÄÇËøôÈáå‰πüÊ¥ó‰∏Ä‰∏ãÁ®ø„ÄÇ</p><p>ÂÖàÂõûÈ°æ‰∏Ä‰∏ãÂá†‰∏™Êìç‰ΩúÊó∂ÁöÑËßÑÂàôÔºö</p><ul><li><code>Client</code> Âè™Êúâ‰∏§ÁßçÊÉÖÂÜµ‰∏ãÂèØ‰ª•ÂÆåÊàê‰∏Ä‰∏™Êìç‰ΩúÔºöËØ•Êìç‰ΩúË¢´<strong>ÊâÄÊúâ</strong> <code>Witnesses</code> ËÆ∞ÂΩï <em>Êàñ</em> ËØ•Êìç‰ΩúË¢´<strong>ÊâÄÊúâ</strong> <code>Backups</code> ÊåÅ‰πÖÂåñ(Âç≥Ë¢´ <code>Leader</code> Êé•Êî∂)<blockquote><p>from ¬ß3.2.1, a client only completes an update operation if (1) it is recorded in all f witnesses or (2) it is replicated to f backups.</p></blockquote></li><li>‰∏Ä‰∏™Êú™ÂêåÊ≠•(unsynced)ÁöÑÊìç‰ΩúÂøÖÈ°ª‰∏éÊâÄÊúâÂÖ∂‰ªñÊú™ÂêåÊ≠•ÁöÑÊìç‰ΩúÊó†ÂÖ≥(commutative)<blockquote><p>a completed unsynced operation must be individually commutative with all preceding operations that are not synced yet.</p></blockquote></li><li>Â¶ÇÊûú <code>Leader</code> Ë¶ÅÁ≠îÂ§ç‰∏Ä‰∏™‰∏çÂèØ‰∫§Êç¢(not commutative)ÁöÑÊìç‰ΩúÔºåÈúÄË¶ÅÂÖà‰∏é <code>Backup</code> ËøõË°å‰∏ÄÊ¨°ÂêåÊ≠•(sync)<blockquote><p>a master must sync before responding if the current operation is not commutative with any other existing (preceding) unsynced operations.</p></blockquote></li></ul><h2 id="Durability"><a href="#Durability" class="headerlink" title="Durability"></a>Durability</h2><p>ÊâÄÊúâÁöÑÊìç‰ΩúËá≥Â∞ë‰ºöÂ≠òÂú®‰∫éÊâÄÊúâ <code>Backups</code> (synced) ÊàñÊâÄÊúâ <code>Witnesses</code> (unsynced) ‰∏äÔºåÊâÄ‰ª•ÊÅ¢Â§çÁöÑÊó∂ÂÄôÊâæ‰∏Ä‰∏™ <code>Backup</code> Âä†‰∏ä‰∏Ä‰∏™ <code>Witness</code> Â∞±ËÉΩÊãøÂà∞ÊâÄÊúâÁöÑ‰ø°ÊÅØ„ÄÇ</p><h2 id="Consistency"><a href="#Consistency" class="headerlink" title="Consistency"></a>Consistency</h2><p>synced ÁöÑÊìç‰ΩúÂ≠òÂú®Âú® Backup ‰∏äÔºåÂπ∂ÈÄöËøá ID ÁöÑÊñπÂºèÈò≤Ê≠¢ÈáçÂ§çÊâßË°å„ÄÇunsynced ÁöÑÊìç‰ΩúÂ≠òÂú®Âú® Witness ‰∏äÔºåÂπ∂‰∏îÂèØ‰ª•‰ª•‰ªªÊÑèÈ°∫Â∫èÈáçÊîæ„ÄÇ</p><p>‰∏çËøáËÆ∫ÊñáÂ•ΩÂÉèÊúâ‰∏Ä‰∏™ÂÜÖÂÆπÊ≤°ËÆ≤ÔºåÂ∞±ÊòØ <code>Witness</code> ‰∏äËÆ∞ÂΩïÁöÑÊìç‰Ωú‰∏ç‰∏ÄÂÆöÊúÄÁªà‰ºöÊâßË°åÔºàÊØîÂ¶Ç<code>Client</code>ÂèëËµ∑sync‰πãÂâçÂèëÁîücrashÔºâÔºåÊâÄ‰ª• <code>Witness</code> ÊòØÈúÄË¶ÅÊúâÊú∫Âà∂ÂéªÁ°ÆËÆ§‰∏Ä‰∏™ËÆ∞ÂΩï‰∏ãÊù•ÁöÑÊìç‰ΩúÊòØÊúâÊïàÁöÑ„ÄÇÊàëËßâÂæóÂèØ‰ª•ËÆ© <code>Leader</code> ÂÆöÊúüÁªô <code>Witness</code> ÂêåÊ≠•Ëøô‰∏™‰ø°ÊÅØÔºàÊØîÂ¶ÇÂ∞ÜËøô‰∏™‰πü‰Ωú‰∏∫ sync ÁöÑ‰∏ÄÊ≠•ÔºâÔºåÂêåÊó∂ <code>Witness</code> Âú®ÊÅ¢Â§çÊúüÈó¥‰∏çÊèê‰æõÊú™Ë¢´Á°ÆËÆ§ÁöÑÊìç‰Ωú„ÄÇ</p><h2 id="Linearizability"><a href="#Linearizability" class="headerlink" title="Linearizability"></a>Linearizability</h2><p>ËøòÊòØ‰ªéÂâçÈù¢ÁöÑËßÑÂàôÊé®ÂØº„ÄÇÂ¶ÇÊûú‰∏Ä‰∏™ÂÜôÂÖ•Âú®Âè™Ë¢´ÈÉ®ÂàÜ <code>Witness</code> ËÆ∞ÂΩïÂà∞ÁöÑÊó∂ÂÄôÂ∞±crashÔºåÈáçÂêØ‰πãÂêéÁöÑ <code>Leader</code> ÂèØËÉΩ‰∏ç‰ºöÊúâËøô‰∏™‰ø°ÊÅØÔºå‰ΩÜÊòØËøôÊó∂ÂÄô <code>Client</code> ‰πü‰∏ç‰ºöËÆ§‰∏∫Ëøô‰∏™Êìç‰ΩúÂ∑≤ÂÆåÊàêÔºåÂõ†‰∏∫Ê≤°Êî∂Âà∞ÊâÄÊúâ <code>Witness</code> ÁöÑÁ≠îÂ§ç„ÄÇÂØπ‰∫é<code>Client</code>ËÆ§‰∏∫Â∑≤ÁªèÂÆåÊàêÁöÑÊìç‰ΩúÂÜçÂéªËØªÁöÑÊó∂ÂÄô <code>Leader</code> ËÉΩ‰øùËØÅÁ∫øÊÄß‰∏ÄËá¥„ÄÇËØª <code>Backup</code> ÁöÑÊµÅÁ®ãËÆ∫ÊñáÁöÑÂõæ4‰πüÁ®çÂæÆÊ∂âÂèäÂà∞‰∫ÜÁ∫øÊÄß‰∏ÄËá¥ÁöÑÂá†ÁßçÊÉÖÂÜµ„ÄÇ</p><p>‰∏çËøáËøôÈáåÂè™ÊòØÊñáÂ≠óËÆ∫Ëø∞Ôºå‰πüÊ≤°Êúâ‰ªÄ‰πàÂπ∂Ê≥ïÂÜÖÂÆπÔºå‰Ωú‰∏∫ËØÅÊòéÊÑüËßâËøòÊòØÊúâÁÇπÂçïËñÑÔºå‰ΩÜÊòØ‰πüÊÉ≥‰∏çÂà∞‰ªÄ‰πàÂèçÈù¢‰æãÂ≠ê‚Ä¶‚Ä¶</p><h1 id="ÊúÄÂêé"><a href="#ÊúÄÂêé" class="headerlink" title="ÊúÄÂêé"></a>ÊúÄÂêé</h1><p>ËøôÁØáÊñáÁ´†ÁúÅÁï•‰∫ÜËÆ∫Êñá‰∏≠ÁöÑ‰∏Ä‰∫õÂÜÖÂÆπÔºåÊØîÂ¶Ç‰∏Ä‰∫õÂÆûÁé∞‰∏äÁöÑÁªèÈ™åÁªÜËäÇÔºåÂàÜÂå∫ÁöÑÂ§ÑÁêÜÁ≠âÁ≠â„ÄÇÁúã‰∏ãÊù•ËßâÂæóÂü∫Êú¨ÊÄùÊÉ≥ËøòÂ•ΩÁêÜËß£ÔºåËÆ∫ÊñáËØ¥ËøôÊòØ‰∏Ä‰∏™ÈÄöÁî®ÁöÑ‰ºòÂåñÊâãÊÆµÔºå‰ΩÜÊòØÊÄé‰πàÂèòÊàê‰∏Ä‰∏™ÁúüÊ≠£ÁöÑ‰ºòÂåñÊÑüËßâËøòÊòØË¶ÅÂú®ÂÆûÁé∞ÁöÑÊó∂ÂÄôÂ§öÂÅö‰∫õÂæÆÊìç‚Ä¶‚Ä¶</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ËÆ∫ÊñáÂêçÂ≠óÊòØ„ÄäExploiting Commutativity For Practical Fast Replication„Äã&lt;/p&gt;
&lt;p&gt;CURPÂÖ®Áß∞Consistent Unordered Replication ProtocolÔºå‰∏ªË¶ÅÊòØÂà©Áî®Êìç‰Ωú‰πãÈó¥ÁöÑÁõ∏ÂÖ≥ÊÄßÔºàCommu</summary>
      
    
    
    
    
    <category term="Paper Reading" scheme="https://waynexia.github.io/tags/Paper-Reading/"/>
    
  </entry>
  
  <entry>
    <title>reMarkable2 ‰ΩøÁî®‰ΩìÈ™å</title>
    <link href="https://waynexia.github.io/2022/05/remarkable2/"/>
    <id>https://waynexia.github.io/2022/05/remarkable2/</id>
    <published>2022-05-04T01:37:44.000Z</published>
    <updated>2023-01-02T06:28:43.264Z</updated>
    
    <content type="html"><![CDATA[<p><em>È¢òÂõæÊù•Ëá™<a href="remarkable.com">remarkable.com</a></em></p><h1 id="Âèà‰∏ÄÊ¨°ÂπøÂëäÊäïÊîæ"><a href="#Âèà‰∏ÄÊ¨°ÂπøÂëäÊäïÊîæ" class="headerlink" title="Âèà‰∏ÄÊ¨°ÂπøÂëäÊäïÊîæ"></a>Âèà‰∏ÄÊ¨°ÂπøÂëäÊäïÊîæ</h1><p>Áü•ÈÅìreMarkable2ÊòØÂú®ÊüêÂ§©Âà∑Êé®ÁöÑÊó∂ÂÄôÁúãËßÅ‰∫Ü‰ªñ‰ª¨ÊäïÊîæÁöÑÂπøÂëäÔºåÁúã‰∫Ü‰∏§Â§©‰πãÂêéÂ∞±ÂâÅÊâã‰∫ÜÔºåÈùûÂ∏∏ÂÜ≤Âä®„ÄÇ‰πãÂâçÊÄÄÁñëÂπøÂëäÊòØ‰∏çÊòØÁúüÁöÑÈÇ£‰πàÊúâÁî®ÔºåÊúÄÂêéÊ≤°ÊÉ≥Âà∞ÁîµËßÜË¥≠Áâ©ÁöÑÁ´üÊòØÊàëËá™Â∑±„ÄÇ</p><p>‰∏ÄÁõ¥ËßâÂæóÁúãPDFÂæà‰∏çÁàΩ„ÄÇÊâã‰∏äÁöÑËÆæÂ§áÊúâÂ§™Â∞èÁöÑkindleÔºåÂ§™ÈáçÁöÑsurfaceÂíåÊ≤°ÊÑüËßâÁöÑÁîµËÑëÂ±èÂπï„ÄÇ‰∏ÄÁõ¥ÊúâÁÇπÊÉ≥ÂÜçÊï¥‰∏Ä‰∏™Ôºå‰ΩÜÊòØ‰πü‰∏ÄÁõ¥Ê≤°ÁâπÂà´ÊÉ≥‰∏ãÊâã„ÄÇdpt-rp1ÁúãËµ∑Êù•Á°ÆÂÆû‰πüÂæà‰∏çÈîôÔºå‰∏ç‰∏ÄÂÆöË¶ÅÂ¢®Ê∞¥Â±èÊâÄ‰ª•pad‰πüÂú®ËÄÉËôëËåÉÂõ¥„ÄÇËøôÁßçÊÉÖÂÜµ‰∏ãÂèØËÉΩÊé•‰∏ãÊù•Â∫îËØ•ËØ¥ÁöÑÊòØreMarkable2‰∏∫‰ªÄ‰πà‰∏ç‰∏ÄÊ†∑ÔºåÂèØÊÉúÁöÑÊòØÊàë‰πü‰∏çÁü•ÈÅì‰∏∫‰ªÄ‰πà„ÄÇÂÆÉÁöÑÂá†‰∏™‰∫ÆÁÇπÊØîÂ¶ÇËñÑÂíåÊâãÂÜô‰ΩìÈ™åÂØπÊàëÈÉΩÂè™ÁÆó‚ÄúÊúâ‰∫ÜÊõ¥Â•ΩÔºåÊ≤°Êúâ‰πüÊó†ÊâÄË∞ì‚ÄùÁöÑËåÉÁï¥ÔºåÂè™ËÉΩËØ¥ÊòØÂπøÂëäÊäïÊîæÁöÑÊàêÂäüÂêß„ÄÇ</p><h1 id="ÊßΩÁÇπ"><a href="#ÊßΩÁÇπ" class="headerlink" title="ÊßΩÁÇπ"></a>ÊßΩÁÇπ</h1><p>Âõ†‰∏∫ÂÖ•ÊâãÁöÑÊó∂ÂÄôÂØπÂÆÉÁöÑÊúüÊúõÊõ¥ÂÅèÂêë‰∫é‰∏Ä‰∏™ÈòÖËØªÂô®ÔºåÂºÄÁÆ±Áî®‰∫ÜÂá†Â§©Â∞±ÊúâÂ•ΩÂ§öÊÉ≥ÂêêÊßΩÁöÑÂú∞Êñπ‚Ä¶‚Ä¶</p><ul><li><p>ÁøªÁõñÊ≠ªË¥µ‰ΩÜÊòØÂäüËÉΩÈùûÂ∏∏Â∞ë„ÄÇ<br>ÊàëËßâÂæóËøô‰∏™ÁõñÂ≠êÂ∞±ÊòØ‰∏Ä‰∏™Â∏¶‰∏§ÂùóÁ£ÅÈìÅÁöÑÂ£≥ÔºåÂÆåÂÖ®‰∏çËÉΩÁÆóÊòØÁîµÂ≠êÈÖç‰ª∂„ÄÇÊú∫Ë∫´‰æßÈù¢ÁïôÊúâÂá†‰∏™ÈáëÂ±ûËß¶ÁÇπÔºå‰ΩÜÊòØËøô‰∏™Â£≥ÂØπÂ∫îÁöÑ‰ΩçÁΩÆÂ±ÖÁÑ∂‰ªÄ‰πàÈÉΩÊ≤°Êúâ„ÄÇËÄå‰∏îÂ£≥Êú¨Ë∫´Â∞ÅÈù¢ÊúâÁ£ÅÂê∏Ôºå‰ΩÜÊòØÊú∫Âô®‰∏çËÉΩÂìçÂ∫îÁøªÁõñÂä®‰Ωú‚Ä¶‚Ä¶ËÆ©ÊåâÈîÆÁÑ¶ËôëÁöÑ‰∫∫ÈùûÂ∏∏ÈöæÂèó„ÄÇ</p></li><li><p>Ê≤°ÊúâËÉåÂÖâÁÅØ„ÄÇ<br>‰∏§‰ª£ÈÉΩÊ≤°ÊúâÔºå‰∏çÁü•ÈÅìÊúâ‰ªÄ‰πàÁâπÂà´ÁöÑÂéüÂõ†„ÄÇÂú®ÊàëÁöÑÊ°åÈù¢ÁéØÂ¢É‰∏äÂè™Êúâ‰∏Ä‰∏™Â±èÂπïÁÅØÔºåÊâÄ‰ª•ÂΩìÊôö‰∏äÈù†Âú®Ê§ÖÂ≠ê‰∏ä‰∏çÂºÄÈ¢ùÂ§ñÂÖâÊ∫êÂü∫Êú¨‰∏çËÉΩÁúã„ÄÇÁªèËøá‰∫Ü‰∏Ä‰∏™Èò¥Â§©ÔºåÂÆ§ÂÜÖÂÖâÁ∫øÁ®çÂæÆÊöó‰∏ÄÁÇπÂ∞±Ë¶ÅÂºÄÈ°∂ÁÅØ‰ΩøÁî®‰∫Ü„ÄÇ</p></li><li><p>Â±èÂπïÂàÜËæ®Áéá‰Ωé„ÄÇ<br>Ëøô‰∏™‰∏ªÊé®ÁöÑÊòØÂÉèÁúüÁ∫∏‰∏ÄÊ†∑ÁöÑ‰π¶ÂÜô‰ΩìÈ™åÔºå‰ΩÜÊòØË∞ÅÁöÑÁ∫∏ËÉΩÂ§ü‚Ä¶‚Ä¶ÂÜôÂá∫ÈîØÈΩøÔºüËÆæÂ§áÁ¨¨‰∏ÄÊ¨°ÂºÄÊú∫ÁöÑÁ¨¨‰∏Ä‰∏™ÁéØËäÇÂ∞±ÊòØËÆ©‰Ω†ÊãøÁ¨î‰ΩìÈ™å‰∏Ä‰∏ãÔºåÁªìÊûúÊàë‰∏ÄÂàíÊãâÂá∫Êù•‰∏ÄÊù°ÈîØÈΩøÔºåÂΩìÂú∫ËöåÂü†‰Ωè‰∫Ü„ÄÇ</p></li><li><p>ËΩØ‰ª∂ÔºàÂõ∫‰ª∂Ôºâ‰ΩìÈ™åÂæàÂ∑ÆÔºåËøô‰∏™ÂàÜ‰∏§ÊñπÈù¢„ÄÇ</p><ul><li>È¶ñÂÖàÊàëËßâÂæóËøô‰∏™Á≥ªÁªüÔºàv2.12.3ÔºâÁöÑÂü∫Êú¨ÂäüËÉΩÊòØÁº∫Â§±ÁöÑÔºåÊØîÂ¶ÇÁ¨îÂ±ÖÁÑ∂‰∏çÊîØÊåÅË∞ÉËäÇÂéãÊÑüÁÅµÊïèÂ∫¶ÔºåÂØºËá¥ÊàëÂú®‰π†ÊÉØÁöÑÂäõÈÅì‰∏ãÂè™Êúâ‰∏ÄÁßçÁ¨îËß¶ËÉΩ‰ΩøÁî®;ËÄå‰∏î‰Ω†ÁîöËá≥‰∏çËÉΩÂú®PDF‰∏äÈÄâÊã©ÊñáÂ≠óÔºåsuch a REMARKABLE tablet„ÄÇ</li><li>‰ª•Âèä‰∏çÈÇ£‰πàÂü∫Êú¨ÁöÑÂäüËÉΩ‰πüÊòØÁº∫Â§±ÁöÑÔºàÂØπ‰∫é‰∏çÊÉ≥ÊØè‰∏™ÊúàÂÜçÂ§öÊéè58.88 hkd‰∏î‰∏çÊÉ≥ÊäòËÖæÁî®Êà∑Êù•ËØ¥Ôºâ„ÄÇÈÇÆ‰ª∂‰º†Ëæì„ÄÅ‰∏âÊñπÂ≠òÂÇ®ÂíåÂ±èÂπïÂàÜ‰∫´Ëøô‰∫õÂäüËÉΩÈÉΩË¢´<em>remarkable.com</em>Âàó‰∏∫‰∫Ü‰ªòË¥πËÆ¢ÈòÖÂÜÖÂÆπ„ÄÇ</li></ul></li></ul><h1 id="Ëøò‰∏çÈîôÁöÑÂú∞Êñπ"><a href="#Ëøò‰∏çÈîôÁöÑÂú∞Êñπ" class="headerlink" title="Ëøò‰∏çÈîôÁöÑÂú∞Êñπ"></a>Ëøò‰∏çÈîôÁöÑÂú∞Êñπ</h1><p>‰∏ªË¶Å‰ΩøÁî®Âú∫ÊôØÊòØÊãøÊù•ÁúãPDFÔºåÊØîËµ∑ÊàëÁöÑvoyageÁ°ÆÂÆûÂ§ß‰∫Ü‰∏çÂ∞ëÔºåÂ±èÂπïÂ∞èÊòØvoyageÁúã‰∏çÊù•ÁöÑÂîØ‰∏ÄÂõ†Á¥†„ÄÇ‰ΩÜÊòØÂÆûÈôÖÊãøA4Á∫∏ÊØî‰∫Ü‰∏ãÊâçÂèëÁé∞rm2‰πüÂè™‰ªÖ‰ªÖÊØîA5Â∞∫ÂØ∏Á®çÂÆΩ‰∏Ä‰∫õÔºå‰ΩÜÊòØË£ÅÊéâÈ°µÈù¢ËæπÁºòÁöÑÁïôÁôΩ‰πãÂêé‰πüËÉΩÂ§üÂæàËàíÊúçÂú∞Â±ïÁ§∫‰∏ÄÈ°µÁ∫∏ÁöÑÂÜÖÂÆπ‰∫ÜÔºåÂΩìÁÑ∂Â≠óËøòÊòØÂèòÂ∞è‰∫Ü‰∏Ä‰∫õ„ÄÇ</p><img class="url&#x3D;compare.jpg title&#x3D;Âíåkindle voyage‰ª•ÂèäA5Á∫∏ÁöÑÂØπÊØî„ÄÇÂü∫Êú¨Âè™ÊØîA5ÂÆΩÂá†ÊØ´Á±≥"><p>Âú®Ëøô‰πãÂâçÊÉ≥Ë¶ÅÂú®kindle‰∏äÁúãÁ∫∏ËàíÊúç‰∏ÄÁÇπÔºåÂ∞ùËØïËøáÂêÑÁßçÊñπÂºèËØïÂõæÈáçÊéíPDFÊù•ÈÄÇÂ∫îkindleÔºå‰πüËÆ∏ÁÆÄÂçïÂú∞Ë£Å‰∏Ä‰∏ãÂä†‰∏äÊ®™Â±èÂ∞±ËÉΩËÆ©‰ΩìÈ™åÊèêÂçá‰∏çÂ∞ë„ÄÇ</p><p>ÊãøÁùÄÁ¨îÁöÑÊó∂ÂÄô‰ºöËá™ÁÑ∂Âú∞ÊÉ≥ÂÜôÂÜôÁîªÁîª„ÄÇÂÜôÂæóÂ§™‰∏ëÂ∞±‰∏çÂ±ïÁ§∫‰∫ÜÔºåÁîªÂ∞±ÂÉè‰∏ãÈù¢ËøôÊ†∑ÔºåÈùûÂ∏∏Ëâ∫ÊúØ„ÄÇ‰ªîÁªÜÁ†îÁ©∂‰∫Ü‰∏Ä‰∏ã‰∏∫‰ªÄ‰πàÂú®ÊùøÂ≠ê‰∏äÈù¢ÂÜôÂ≠óÂ∞±Ëøô‰πàÈöæÁúãÔºåÊúÄÂêéÂæóÂá∫ÁöÑÁªìËÆ∫ÊòØÊùøÂ≠êÁöÑÈóÆÈ¢ò<del>ÔºåÁúüÁöÑ</del>„ÄÇÂõ†‰∏∫Â±èÂπïÊúâ‰∏ÄÂÆöÂéöÂ∫¶ÔºåÁ¨îÂ∞ñÊé•Ëß¶Âà∞ÁöÑ‰ΩçÁΩÆÂíåËÆæÂ§áÁîªÂá∫Á¨îËß¶ÁöÑ‰ΩçÁΩÆ‰πãÈó¥Â≠òÂú®‰∏Ä‰∏™ÂûÇÁõ¥‰∏äÁöÑË∑ùÁ¶ª„ÄÇÂ¶ÇÊûúÁúºÁùõÁúãÊùøÂ≠êÁöÑÊó∂ÂÄô‰∏éÊùøÂπ≥Èù¢Ê≥ïÁ∫øÂ≠òÂú®‰∏Ä‰∏™ËßíÂ∫¶ÔºåÂ∞±‰ºöÂú®ËßÜËßâ‰∏äÂ∏¶Êù•‰∏Ä‰∏™Á¨îÂ∞ñÂíåÁ¨îËß¶ÁöÑÂÅèÂ∑ÆÈáèÔºåÊÑüËßâÊúÄÊòéÊòæÁöÑÊòØÁîªÁîªÁöÑÊó∂ÂÄô‰Ω†ÂæàÈöæËÆ©‰∏§Êù°Á∫øÂÆåÁæéÂú∞ËøûÊé•Ëµ∑Êù•ÔºåÂõ†‰∏∫‰Ω†ËßâÂæó‰Ω†Â∫îËØ•ËêΩÁ¨îÁöÑÂú∞ÊñπÂπ∂‰∏çÊòØÂ∏¶ÁîµÁ¢≥Á≤âÂá∫Êù•ÁöÑ‰ΩçÁΩÆ„ÄÇÁîöËá≥Âú®Reddit‰∏äÁúãÂà∞‰∏Ä‰∏™adviceÔºåÂ¶ÇÊûú‰Ω†ÊòØÂè≥ÊíáÂ≠êÁöÑËØùÂèØ‰ª•Â∞ùËØïÂ∞ÜËÆæÂ§áÁöÑÂÅèÂ•ΩËÆæÁΩÆË∞ÉÂà∞Â∑¶ÊíáÂ≠êÔºåËøôÊ†∑Á≥ªÁªüÂØπÁ¨îËß¶ËøõË°åÁöÑ‰øÆÊ≠£ËÉΩÂ§üÂáèËΩªËøô‰∏™ÂÅèÁßªÁé∞Ë±°„ÄÇ</p><img class="url&#x3D;doraemon.png title&#x3D;Áîª"><p>ËÄåÊàëÁöÑÂØπ‰∫é‰∏∫‰ªÄ‰πàÂÜôÂ≠ó‰ºöÂèò‰∏ëÁöÑÁªìËÆ∫ÊòØÔºåÂú®ÊàëÂÜôÂ≠óÁöÑÊó∂ÂÄôÊâã‰ºöÂ∞ùËØïÂéªÂº•Ë°•Ëøô‰∏™ÂÅèÂ∑ÆÈáè‰ªéËÄåÂØºËá¥ÂÜôÂá∫Êù•ÁöÑ‰∏úË•øÂèòÂΩ¢<del>ÔºàÈÄêÊ∏êËøúÁ¶ªÂ∞èÊ†áÈ¢òÔºâ</del>„ÄÇ</p><p>Âõ†‰∏∫ÁîªÁîªÊäÄËÉΩÂÆûÂú®Â§™Â∑ÆÔºå‰∏çÂ§™Â•ΩËØ¥ÁúüÊãøËøô‰∏™ÂΩìÁîªÊùø‰ºöÊòØ‰ªÄ‰πà‰ΩìÈ™åÔºå‰∏çËøáËøòÊòØË¶ÅÊèê‰∏Ä‰∏ãÁî®‰∫Ü‰∏ÄÊÆµÊó∂Èó¥ÊÑüËßâÂà∞ÁöÑËøô‰∏™ËÆæÂ§áÂú®ËΩØ‰ª∂ÊñπÈù¢ÈöæÂæóÂÅö‰∫ÜÁöÑ‰∏Ä‰ª∂ÊèêÂçá‰ΩìÈ™åÁöÑÂäüËÉΩ„ÄÇÂú®Áî®Á¨îÁºñËæëÁöÑÊó∂ÂÄôÂèØ‰ª•‰ΩøÁî®ÂõæÂ±ÇÂäüËÉΩÔºåÊØîÂ¶Ç‰∏äÈù¢ÁöÑDoraemonÂíåNobitaÂ∞±ÊòØÂÖàÁîªÂ•ΩÁúºÁú∂ÔºåÂÜçÊãâÂà∞Âè¶‰∏Ä‰∏™ÂõæÂ±ÇÂéªÊ∂ÇÁúºÁè†Â≠êÔºåÂèØ‰ª•Èò≤Ê≠¢Áî®Ê©°ÁöÆÊì¶ÁöÑÊó∂ÂÄôÊääÂÖ∂‰ªñÂ∑≤ÁªèÁîªÂ•ΩÁöÑÂú∞ÊñπÊì¶Êéâ„ÄÇ</p><p>‰∏çËøáÂú®ÂØºÂá∫Âà∞Âà´ÁöÑËÆæÂ§á‰∏äÁöÑÊó∂ÂÄô‰ºöÂèëÁé∞Á¨îËøπÊúâ‰∫õÂ•áÊÄ™ÔºåÊúâÁÇπÂñ∑Á≤âÈ¢úÊñôÁöÑÊÑüËßâ„ÄÇÂ∞±ÊòØ‰ªéÁì∂Â≠êÈáåÈù¢Âñ∑Âá∫Êù•ÊòØÁ≤âÊú´ÔºåÊãøÁÅ´Âä†ÁÉ≠‰∏Ä‰∏ãÂ∞±‰ºöËûçÂåñÊàêÈ¢úÊñôÈïÄËÜúÁöÑÈÇ£Áßç„ÄÇÂú®ËÆæÂ§á‰∏äÁúãËµ∑Êù•Âè™ÊòØÊØîËæÉÊµÖÁöÑÁ¨îËøπÔºåÂØºÂá∫Êù•‰πãÂêé‰ºöÂèòÂæóÂ•áÊÄ™Âú∞ÂúÜÊ∂¶Ëµ∑Êù•„ÄÇ</p><h1 id="Workflow"><a href="#Workflow" class="headerlink" title="Workflow"></a>Workflow</h1><p>Â¶ÇÊûúÊòØÁúãÁ∫∏ÁöÑËØùÂ∞±ËæπÁúãËæπÂÜôÂÜôÁîªÁîªÔºå‰∏çËøáÁî±‰∫éÊâãÂÜôËØÜÂà´Â∑Æ‰∏çÂ§öÂ∞±ÊòØÂè™ÊúâËã±ÊñáÔºåÊâÄ‰ª•ÂæóË¶ÅËµõÂçöË™äÂÜô‰∏Ä‰∏ã„ÄÇ‰ªéÁôΩÁ∫∏ÂºÄÂßãÁöÑËçâÁ®øÂ∞±ÂΩì‰ΩúÊòØÂÜôÂú®Á∫∏‰∏ä‰∫ÜÔºåÊúÄÂêéËøòÊòØÊãøÁîªÂõæÊùøÈáçÊñ∞Áîª‰∏ÄÊ¨°ÔºàÂΩìÁÑ∂ÊâãÁªòÁöÑ‰∏úË•ø‰πüÂ§™ÈöæÁúãËÄå‰∏çËÉΩÁõ¥Êé•ÊãøÂá∫Êù•Áî®Ôºâ„ÄÇÊãøËøô‰∏™ÂÜôÂÜôÁîªÁîªÁöÑÊó∂ÂÄô‰ΩìÈ™åËøòË°åÔºå‰∏çÂêåÁöÑ‰∫ãÊÉÖÂçïÁã¨ÂºÄ‰∏ç‰∏ÄÊ†∑Á¨îËÆ∞Êú¨ÔºåÂèØ‰ª•ÈÅøÂÖçËøá‰∫Ü‰∏ÄÊÆµÊó∂Èó¥ÊúõÁùÄ‰∏ÄÂ†ÜÁ∫∏Â§¥ÁóõÔºåÁé∞Âú®Ê°åÈù¢Âü∫Êú¨ÂèØ‰ª•‰∏çÁî®Êîæa4Á∫∏‰∫Ü„ÄÇ</p><p>‰πüËÆ∏Âõ†‰∏∫connectÊòØ‰ªñ‰ª¨ÂêéÈù¢Âä†ÁöÑÂäüËÉΩÔºåÊâÄ‰ª•Âú®21Âπ¥10Êúà‰πãÂâç‰π∞ÁöÑÂèØ‰ª•Ëé∑ÂæóÊó†ÈôêÁöÑfree connectÊùÉÈôê„ÄÇ‰ΩÜÊòØ‰ªñËÆ§ËØÅË¥≠‰π∞‰ø°ÊÅØÁöÑÊñπÂºèÈùûÂ∏∏ÂéüÂßãÔºåÊòØËÆ©‰Ω†Êèê‰æõËÆ¢ÂçïÈÇÆ‰ª∂ÁöÑËÆ¢ÂçïÂè∑‰ªñ‰ª¨Êù•‰∫∫Â∑•Á°ÆËÆ§Ôºå‰∫éÊòØÊâæÂΩìÊó∂Ë¥≠‰π∞ÁöÑÂ∫óÂÆ∂Ë¶Å‰∫Ü‰∏™ËÄÅËÆ¢ÂçïÈÄöËøá‰∫ÜÈ™åËØÅÔºàÂ∫óÂÆ∂Áõ¥Êé•Áªô‰∫ÜÊàë‰∏Ä‰∏™‰∏§Âπ¥ÂâçÁöÑËÆ¢ÂçïÔºåÈÇÆ‰ª∂‰∏äÈù¢ÂÜôÁöÑÊòØÁ¨¨ÂõõÊâπË¥ß‚Ä¶‚Ä¶Ôºâ„ÄÇËÄåconnectËß£ÈîÅÁöÑÂäüËÉΩÊàëËßâÂæóÊØîËæÉÊúâÁî®ÁöÑÂ∞±Âá†‰∏™ÔºöÊñá‰ª∂ÂêåÊ≠•„ÄÅÈÇÆ‰ª∂ÂèëÈÄÅ‰ª•Âèä‰∏âÊñπÂ≠òÂÇ®ÈõÜÊàê„ÄÇÂ¶ÇÊûúÊ≤°ÊúâconnectËÆ¢ÈòÖÁöÑËØùË∂ÖËøá‰∫îÂçÅÂ§©Ê≤°ÊúâÊâìÂºÄÁöÑÊñá‰ª∂Â∞±Ê∞∏Ëøú‰∏ç‰ºöÂêåÊ≠•ÔºåËøôÊòæÁÑ∂ÊòØÊúâ‰∫õÂΩ±Âìç‰ΩøÁî®‰∫Ü;ËÄåÈÇÆ‰ª∂ÂèëÈÄÅÂíå‰∏âÊñπÂ≠òÂÇ®ÈÉΩËÉΩÂ§üÊØîËæÉÊñπ‰æøÂú∞ÂØºÂÖ•ÂØºÂá∫ÈòÖËØªÊùêÊñôÂíåÊ∂ÇÈ∏¶„ÄÇ‰∏çËøáÂ¶ÇÊûúÂÆåÂÖ®Ê≤°ÊúâconnectÁöÑËØù‰πüËÉΩÈÄöËøáusbÂíåÁîµËÑëËøûÊé•Êù•ÊúâÁ∫ø‰º†ËæìÔºåÊâÄ‰ª•Â§á‰ªΩËµ∑Êù•‰πüËøòË°å„ÄÇ</p><h1 id="reHackable"><a href="#reHackable" class="headerlink" title="reHackable"></a>reHackable</h1><p>reMarkableÁöÑÁ≥ªÁªüÊòØ‰∏Ä‰∏™Âè´ÂÅö<code>Codex</code>ÁöÑlinuxÁ≥ªÁªüÔºåÈÄöËøáusbËøûÊé•‰∏äÂ∞±‰ºöÂºÄÊîæ‰∏Ä‰∏™remote terminalÁªô‰Ω†ÔºåÂèØËÉΩÊòØÊØîËæÉÂºÄÊîæÊâÄ‰ª•ÊúâËÆ∏Â§ö‰∏âÊñπÂàõ‰ΩúÁöÑÂêÑÁßçÂ∑•ÂÖ∑Êù•Â¢ûÂº∫‰ΩøÁî®‰ΩìÈ™åÔºå<a target="_blank" rel="noopener" href="https://github.com/reHackable/awesome-reMarkable">Awesome reMarkable</a>ÊòØ‰∏Ä‰∏™awesomeÂàóË°®ÔºåÂèØ‰ª•ÊâæÂà∞ËÆ∏Â§öÊúâË∂£ÁöÑ‰∏úË•ø„ÄÇÊØîÂ¶ÇÊãøÊù•ÊãâÂ∞èÊ∏ÖÂçïÁöÑ<a target="_blank" rel="noopener" href="https://recalendar.me/">recalender</a>Ôºå‰ª•ÂèäÁúãËµ∑Êù•ÂèØ‰ª•ÂÆåÂÖ®Ëá™Âª∫connectÊúçÂä°ÁöÑ<a target="_blank" rel="noopener" href="https://github.com/ddvk/rmfakecloud">rmfakecloud</a>ÔºåÁîöËá≥ËøòÊúâ‰∏Ä‰∏™ÂåÖÁÆ°ÁêÜÂô®<a target="_blank" rel="noopener" href="https://toltec-dev.org/">Toltec</a>„ÄÇÊ¥ªË∑ÉÁöÑhackÂ∏¶Êù•‰∫ÜË∑üÂÆòÊñπÂÖãÊâ£featureÂÆåÂÖ®‰∏ç‰∏ÄÊ†∑ÁöÑ‰ΩìÈ™åÔºåËôΩÁÑ∂Ê≤°ÊúâÂÆûÈôÖÁî®‰∏äÂá†‰∏™‰ΩÜÊòØÁúãÁùÄÂæàËàíÊúç‚Ä¶‚Ä¶</p><h1 id="ÊúÄÂêé"><a href="#ÊúÄÂêé" class="headerlink" title="ÊúÄÂêé"></a>ÊúÄÂêé</h1><p>ÊúÄÂêéËøòÊòØÊÉ≥Âº∫Ë∞É‰∏Ä‰∏ãÁúãPDFÁöÑÈúÄÊ±Ç‰ΩìÈ™åÊúÄÂ•Ω‰πüÊúÄ‰æøÂÆúÁöÑÊñπÊ°àËøòÊòØÊâìÂç∞Âá∫Êù•„ÄÇ<del>ÂîØ‰∏ÄÂè™ÊúâÁîµÂ≠êÈòÖËØªÂô®ËÉΩÂ§üÂ∏¶Êù•ÁöÑÊòØÂíåÈòÖËØªÊó†ÂÖ≥ÁöÑËä±Èí±ÁöÑÂø´ÊÑü</del></p><p>ÊúÄËøë‰πüÂú®ÂïÜÂú∫Èó≤ÈÄõÁöÑÊó∂ÂÄô‰ΩìÈ™å‰∫Ü‰∏Ä‰∫õÂÖ∂‰ªñÂìÅÁâåÁöÑÂ¢®Ê∞¥Â±èÔºåÊÑüËßâreMarkableÁöÑ‰ª∑Ê†ºËøòÊòØÂ§™Ê≤°‰ºòÂäø‰∫Ü„ÄÇÁî®Â∑Æ‰∏çÂ§ö‰∏ÄÂçäÁöÑÈí±Â∞±ËÉΩ‰π∞Âà∞Â∑Æ‰∏çÂ§öÁöÑ‰π¶ÂÜô‰ΩìÈ™å‰ª•Âèä‰πüËÆ∏‰ºöÊòØÂä†ÂàÜÈ°πÁöÑÁΩëÁªúÂíåÂêåÊ≠•‰ΩìÈ™åÔºåÂ¶ÇÊûúÂÜçËÆ©ÊàëÈÄâ‰∏ÄÊ¨°ÂèØËÉΩËøòÊòØ‰ºöÈáçÊñ∞Á∫†Áªì‰∏Ä‰∏ãÁöÑ„ÄÇ</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;em&gt;È¢òÂõæÊù•Ëá™&lt;a href=&quot;remarkable.com&quot;&gt;remarkable.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&quot;Âèà‰∏ÄÊ¨°ÂπøÂëäÊäïÊîæ&quot;&gt;&lt;a href=&quot;#Âèà‰∏ÄÊ¨°ÂπøÂëäÊäïÊîæ&quot; class=&quot;headerlink&quot; title=&quot;Âèà‰∏ÄÊ¨°ÂπøÂëäÊäïÊîæ&quot;&gt;&lt;/a&gt;Âèà</summary>
      
    
    
    
    
    <category term="Experience" scheme="https://waynexia.github.io/tags/Experience/"/>
    
    <category term="Device" scheme="https://waynexia.github.io/tags/Device/"/>
    
  </entry>
  
  <entry>
    <title>Ê∑±Êµ∑Ëø∑Ëà™ÔºöÂÜ∞ÁÇπ‰πã‰∏ã</title>
    <link href="https://waynexia.github.io/2022/03/subnautica-below-zero/"/>
    <id>https://waynexia.github.io/2022/03/subnautica-below-zero/</id>
    <published>2022-03-11T17:31:45.000Z</published>
    <updated>2023-01-02T06:28:43.268Z</updated>
    
    <content type="html"><![CDATA[<p>ËøôÊòØÁ≥ªÂàóÁ¨¨‰∫å‰Ωú„ÄÇ‰ΩÜÊòØ‰ªé‰∏Ä‰∫õ‰πãÂâçÁöÑËµÑÊñôÊù•Áúã‰∏ÄÂºÄÂßãÂÜ∞ÁÇπ‰πã‰∏ãÊòØ‰Ωú‰∏∫Á¨¨‰∏ÄÈÉ®ÁöÑ DLC ÁöÑË∫´‰ªΩÈù¢‰∏ñÁöÑÔºå‰∏çËøáÊàëÂú® xbox ÂïÜÂ∫óÁúãÂà∞ÁöÑÊó∂ÂÄôÂÆÉÂ∑≤ÁªèÂíå„ÄäÊ∑±Êµ∑Ëø∑Ëà™„ÄãÂàÜÂºÄÊàê‰∏§‰∏™Êù°ÁõÆ‰∫ÜÔºå‰πüËÆ∏ÊòØÂÅöÁùÄÂÅöÁùÄÂ∞±ÊãøÂá∫Êù•ÂçïÁã¨ÂîÆÂçñ‰∫ÜÂêß„ÄÇ‰∏çËøáÂèØËÉΩÊòØËøô‰∏™ÂéüÂõ†ÔºåÂÜ∞ÁÇπ‰πã‰∏ãÂ§ßÈÉ®ÂàÜÁöÑÂÖÉÁ¥†Âü∫Êú¨Âíå‰πãÂâç‰∏ÄÊ®°‰∏ÄÊ†∑ÔºåÁîªÈù¢ÂíåÊìç‰ΩúÈÉΩÊòØÁÜüÊÇâÁöÑÂë≥ÈÅì<del>ÔºàÊ≤°ÊúâËØ¥ÂÅ∑ÊáíÁöÑÊÑèÊÄùÔºâ</del>„ÄÇ</p><p>Ëøô‰∏™Á≥ªÂàóÁÆÄÂçïÊù•Â∫îËØ•ÁÆó‰ª•Êé¢Á¥¢Êµ∑Ê¥ã‰∏∫‰∏ªÈ¢òÁöÑÁîüÂ≠òÊ∏∏Êàè„ÄÇ‰∏§Ê¨°ÈÉΩÊòØÂú®‰∏ÄÁâáË¢´Êµ∑Ê¥ãË¶ÜÁõñÁöÑÊòüÁêÉ‰∏äÔºàËÉåÊôØÈáåÈù¢Â•ΩÂÉèÊòØÂêå‰∏ÄÈ¢óÊòüÁêÉÔºâÔºå‰ªéÂù†ËêΩÊó∂ÁöÑ‰∏Ä‰∏™Â∞èÈÄÉÁîüËà±ÂºÄÂßãÔºåÂú®Êé¢Á¥¢Âë®Âõ¥ÁéØÂ¢ÉÁöÑËøáÁ®ã‰∏≠Ëé∑ÂèñÁîüÂ≠òÁâ©ËµÑ‰∏éËß£ÈîÅÁßëÊäÄÔºåÂπ∂ÈÄöËøá‰∏çÊñ≠Âú∞Êâ©Â§ßÊé¢Á¥¢ËåÉÂõ¥Êù•Êé®ËøõÂâßÊÉÖ„ÄÇËßâÂæóËøô‰∏™Á≥ªÂàóÊúÄÊúâÁâπÁÇπÁöÑÂú∞ÊñπÂ∞±ÊòØÂÜçÊµ∑Ê¥ã‰∏∫‰∏ªÂú∫ÊôØÁöÑËÆæÂÆö‰∏ãÂ∏¶Êù•ÁöÑÁ´ã‰ΩìÊé¢Á¥¢ÁöÑ‰ΩìÈ™å„ÄÇ</p><p>Ëøô‰∏ÄÊ¨°ÊïÖ‰∫ãÂèëÁîüÂú®Âè¶‰∏ÄÂº†Âú∞ÂõæÔºå‰∏çËøáÂâç‰ΩúÂÖ∂ÂÆûÊ≤°ÊúâÊé®ÂÆåÁöÑÊàëÂπ∂‰∏çËÆ∞ÂæóÂÖ∑‰ΩìÁöÑÂú∞ÂõæÊòØ‰ªÄ‰πàÊ†∑Â≠êÔºåÁúüÊ≠£ËÆ©ÊàëÊÑüÂà∞Âú∞ÂõæÊç¢‰∫ÜÁöÑÊòØÂú∫ÊôØÂÖÉÁ¥†„ÄÇÂâç‰Ωú‰ªéÈÄÉÁîüËà±Âá∫Êù•‰πãÂêéÂú®Âë®Âõ¥ËΩ¨ÊÇ†‰∫ÜÂæà‰πÖÊâçËøõË°åÁ¨¨‰∏ÄÊ¨°ËøúË°åÔºåËøòË¢´ËæêÂ∞ÑË≠¶ÂëäÁªôÂêì‰∫ÜÂõûÊù•„ÄÇÁÑ∂ËÄåËøô‰Ωú‰∏ç‰ªÖÊ≤°ÊúâËæêÂ∞ÑË≠¶ÂëäÔºåÁîöËá≥ËøòËÉΩÂ§üÂæíÊâãÂºÄÈìÄÁüø„ÄÇ‰∏çËøáËøôÊòØÂêéÈù¢ÁöÑÂÜÖÂÆπÔºåÂÜ∞ÁÇπ‰πã‰∏ãÁ¨¨‰∏ÄÂπïÊòØ‰ªéÂÜ∞Â∑ùÂºÄÂßãÁöÑÔºåÂú®ÊàëÁöÑÂç∞Ë±°‰∏≠ËøôÊòØÂâç‰ΩúÊ≤°ÊúâÁöÑË¶ÅÁ¥†„ÄÇ</p><img class="url&#x3D;map.png title&#x3D;Êú¨‰ΩúÂú∞ÂõæÔºåÁôΩËâ≤ÊòØÊñ∞Â¢ûÁöÑÈôÜ‰∏äÂÜ∞Â∑ùÈÉ®ÂàÜÔºå‰∏çËøá‰∏ÄÂ§ßÂçäÈÉΩÊòØÂéª‰∏ç‰∫ÜÁöÑ width&#x3D;30%"><p>Á¨¨‰∏Ä‰ΩúËøõÂ∫¶Â∫îËØ•‰∏çÂà∞‰∏âÂàÜ‰πã‰∏ÄÔºåÁîöËá≥ÈÉΩÊ≤°ËßÅÂà∞Âà©Áª¥Âù¶„ÄÇÂΩìÊó∂ÊòØÂú®ÂÆøËàçÈáåÈù¢ÔºåÊ∑±Â§ú‰∏§ÁÇπ‰∏≠ÊàëËøòÂú®Êî∂ÈõÜÁâ©ËµÑ„ÄÇÂ±èÂπïÈáåÂ§ñÈÉΩÊòØ‰∏Ä‰∏™‰∫∫ÔºåÂÜÖÂøÉ‰∏ÄÁõ¥ÊúâËê¶Áªï‰∏çÊï£ÊÅêÊÉßÊÑü„ÄÇÊàëËÆ∞ÂæóÈÇ£Êó∂ÁöÑÊó•ËÆ∞Â•ΩÂÉèÂÜô‰∫Ü‚ÄúËøô‰∏™Ê∏∏ÊàèÁé©Âá∫‰∫ÜÊ∑±Êµ∑ÊÅêÊÉßÁóá‚Äù‰πãÁ±ªÁöÑËØùÔºåÂÜçÁé©‰∫ÜÂá†‰∏™Â∞èÊó∂Â∞±È°∂‰∏ç‰ΩèÂºÉ‰∫Ü„ÄÇËøô‰∏™Áé∞Ë±°Âú®Ëøô‰∏ÄÊ¨°ËøòÊòØÊ≤°ÊúâÂ•ΩËΩ¨ÔºåÂΩìËá™Â∑±Âèà‰∏ÄÊ¨°Ë¢´‰∏¢Âà∞Êµ∑ÈáåÔºåÂë®Âõ¥Âè™Êúâ‰∏âÂõõÁ´ãÊñπÁ±≥ÁöÑÂÆâÂÖ®Á©∫Èó¥Êó∂ÔºåËøôÁßçÁÜüÊÇâÁöÑÊÑüËßâÂèàÂõûÊù•‰∫Ü„ÄÇÁî±‰∫éÂú∞ÂõæÂú∫ÊôØÈùûÂ∏∏Â§çÊùÇÔºåÂú®ÂÖ®Ë∫´Ë¥ØÊ≥®Âú∞Ë¥¥ÁùÄÊµ∑Â∫ïÁßªÂä®ÂØªÊâæÁâ©ËµÑÁöÑÊó∂ÂÄôÁïôÊÑèÊ∞ßÊ∞îË°®Â∞±Â∑≤ÁªèÂæàÁ¥ßÂº†‰∫ÜÔºåÁªèÂ∏∏Êó†ÊöáÁïôÊÑèÂë®Âõ¥ÊΩúËóèÁùÄÁöÑÂÖ∂‰ªñÁîüÁâ©„ÄÇÂú®ÂâçÊúüËøòÊ≤°ÊúâËΩΩÂÖ∑Ë£ÖÂ§áËÉΩÁ®çÂæÆÂ¢ûÂä†‰∏Ä‰∫õÂÆâÂÖ®ÊÑüÁöÑÊó∂ÂÄôÂ•ΩÂá†Ê¨°Ë¢´Á™ÅÂ¶ÇÂÖ∂Êù•ÁöÑË¢≠ÂáªÂêìÂà∞„ÄÇËÄåÂ∞±ÁÆóÊúâ‰∫ÜËΩΩÂÖ∑‰πãÂêéÈù¢ÂØπÊú™Áü•ÁîüÁâ©Êó∂‰ªçÁÑ∂Èöæ‰ª•ÂÖãÊúçÊÅêÊÉßÔºåÊÄªÊòØÂ∞èÂøÉÁøºÁøºÂú∞ÈÅøÂÖçÂíåÂÆÉ‰ª¨Êé•Ëß¶ÔºåÊÉ≥ÂéªÁöÑÂú∞ÊñπÊúâÂ•áÊÄ™ÁîüÁâ©Âú®ÂæòÂæäÊó∂ÁªèÂ∏∏Á≠âÂà∞ËÇöÂ≠êÈ•ø„ÄÇËøôÊó∂ÂÄôÊÉ≥ÊÉ≥Á•ñÂÖàËµ∞Âá∫‰∫Ü‰∏õÊûóÁúüÊòØÂ§™Â•Ω‰∫ÜÔºåËÉΩÁªèÂ∏∏ÊääÂü∫Êú¨ÁöÑÁîüÂ≠òÂΩì‰Ωú‰∏Ä‰ª∂ÁêÜÊâÄÂΩìÁÑ∂ÁöÑ‰∫ãÊÉÖÁúüÂÆûÂ§™Â•Ω‰∫Ü„ÄÇ</p><p>ËÄå‰º¥ÁùÄËøôÁßçÊÑüËßâÂú®Êµ∑Ê¥ã‰∏≠Ê∏∏ÂºãÁöÑËøáÁ®ã‰πüËÆ∏ÊòØÊ∏∏ÊàèÈáåÊúÄËÆ©ÊàëÂñúÊ¨¢ÁöÑÂú∞Êñπ„ÄÇÂíåÂú®Ê∏∏Ê≥≥È¶ÜÊ∏∏Ê≥≥‰∏çÂêåÔºåÊ∏∏ÊàèÁîªÈù¢Âπ∂Ê≤°ÊúâÊ∏≤ÊüìÂØÜÈì∫ÁöÑÂ∞èÁì∑Á†ñÊàñËÄÖË¢´Ê≥¢Á∫πÊâìÊï£Âà∞Âú∞‰∏äÁöÑÂÖâÁ∫øÔºåËÄåÊòØÈÄöËøáÁ´ã‰ΩìÁöÑÁîüÊÄÅÁéØÂ¢ÉÊù•Áªô‰∫∫Âú®Ê∞¥‰∏≠ÁöÑÊÑüËßâ„ÄÇËÄå‰∏îÊòØ‰∏ÄÁâáÈùûÂ∏∏ÂπøÈòîÔºåÂú∞Èù¢Â¥éÂ≤ñÔºåÊ≤°ÊúâÂêåÁ±ª‰ΩÜÊúâËÆ∏Â§öÂÖ∂‰ªñÁâ©ÁßçÁöÑÊ∞¥„ÄÇ</p><img class="url&#x3D;environment.png title&#x3D;ÂâçÊúüÁöÑËø∑Ë∑ØÁÇπ"><p>ÁÑ∂ËÄåÂú®ÂÜôÊú¨ÁØáÁöÑÊó∂ÂÄôËßâÂæóËøôÊ¨°ÂèàË¶ÅÂºÉÊéâ‰∫Ü„ÄÇÊâæÂÆûÂÜµÂΩïÂÉèÂèÇËÄÉ‰∫Ü‰∏ãÔºåËøôÊ¨°ÂâßÊÉÖÂ∫îËØ•ÊòØÂü∫Êú¨Âø´Êé®ÂÆå‰∫ÜÔºå‰∏çËøáËøûÁùÄÊé®‰∫ÜÂá†‰∏™Êôö‰∏äËßâÂæóËÑëË¢ãÂ∑≤Áªè‰∏çË°å‰∫Ü„ÄÇÂà∞‰∫ÜÂêéÊúüÂü∫Êú¨‰∏äÊâÄÊúâÂú∞ÊñπÈÉΩËÉΩÂ§üÂéªÔºåÊâæ‰∏úË•øÁéØËäÇÂ∞±ÂèòÂæóÈùûÂ∏∏È∫ªÁÉ¶„ÄÇÊµ∑Ê¥ãÁöÑÈÉ®ÂàÜÈöèÁùÄÊ∑±Â∫¶‰∏ãÊΩúÂú∞ÂΩ¢ÂèòÂæóË∂äÊù•Ë∂äÁªïÔºåÂ∞±ÁÆóÁªô‰∫Ü‰ø°Ê†á‰πüË¶ÅÂéªÊâæÊîªÁï•ÊâçÁü•ÈÅìÊÄé‰πàËµ∞ÔºåËÄåÈôÜÂú∞ÈÉ®ÂàÜ‰∏ÄË®Ä‰∏çÂêàÂ∞±Êù•ÊûÅÁ´ØÂ§©Ê∞îÊääËÉΩËßÅÂ∫¶ÈôçÂà∞‰º∏Êâã‰∏çËßÅ‰∫îÊåáÔºåËøòÊúâÈáçÊñ∞ÂõûÊù•ÁöÑÂº∫Â§ßÂºïÂäõ‰πüÁõ¥Êé•ÊääÊú∫Âä®ËÉΩÂäõÊëòÊéâ‰∫Ü‰∏Ä‰∏™Á∫µËΩ¥„ÄÇËø∑Ë∑ØËá¥Ê≠ªÁöÑÊ¨°Êï∞Ë∂äÊù•Ë∂äÂ§öÔºå‰ª•Ëá≥‰∫éÁé∞Âú®‰∏ÄÂõûÊÉ≥Ëµ∑Êù•ÊâæË∑ØÊó∂Âú®Â§©ÊóãÂú∞ËΩ¨ÁöÑÂ±èÂπïÈÉΩ‰ºöÂ§¥Êôï„ÄÇÂΩìÁÑ∂Ëøô‰∏™Ë∑ØÁó¥ÂèØËÉΩÊòØÊàëÁöÑÈóÆÈ¢òÔºåÂ∞±ÁÆóÊàëÂú®ËøôÈáåÊü•ÊîªÁï•ÁúãË∑ØÁ∫øÁöÑÊ¨°Êï∞Â∑≤ÁªèÊØî XB2 ËøòÂ§ö‰∫ÜÔºà</p><p>Ëøô‰∏ÄÊ¨°Â§ßÂûãÊÄ™Áâ©ÁöÑÊéâ san Á®ãÂ∫¶Â∑≤ÁªèÊØîÂâç‰ΩúÂ•Ω‰∫ÜÂæàÂ§öÔºå‰∏çËøáËøòÊòØ‰∏çÂ§™ËÉΩÈÄÇÂ∫î„ÄÇÂØπÊàëÊù•ËØ¥Êµ∑Ê¥ã‰∏ªÈ¢òÁöÑÂÜíÈô©Â§ßÊ¶ÇË¶Å ABZU ÈÇ£ÁßçÁ®ãÂ∫¶ÁöÑÊâç‰ºöËßâÂæóËàíÊúçÂêß„ÄÇ</p><img class="url&#x3D;fish.png title&#x3D;Â∑≤ÁªèÂíåËîºÂ§ö‰∫ÜÁöÑÁîüÁâ© width&#x3D;50%"><p>ÂØπ‰∫éÊñ∞Âä†ÁöÑÂÜ∞ÂéüÂú∫ÊôØÂπ∂‰∏çÊòØÂæàÂñúÊ¨¢Ôºå‰∏¢Êéâ‰∫ÜÁ´ã‰ΩìÊé¢Á¥¢ÁöÑÁâπËâ≤ÔºåÂíåÂÖ∂‰ªñÁöÑ‰ΩúÂìÅÊ≤°Êúâ‰ªÄ‰πàÂå∫Âà´‰∫ÜÔºåËÄå‰∏îÂ∞±ÁÆóÊòØÂú®Âêå‰∏Ä‰∏™‰ΩúÂìÅÈáåÈù¢‰πüËßâÂæóÂÜ∞ÂéüÁöÑÁîüÁâ©‰∏çÂ¶ÇÊµ∑Ê¥ãÊúâÊÑèÊÄùÔºàÂèØËÉΩÂêÑÁßçÂ•áÂ•áÊÄ™ÊÄ™ÁöÑÈôÜÂú∞ÁîüÁâ©Âπ≥Êó∂ÁúãÂæó‰πü‰∏çÂ∞ë‰∫ÜÔºâ„ÄÇËøòÊúâÈôÜÂú∞‰∏äÁöÑËΩΩÂÖ∑ÁúüÊòØÂ§™ÂÇ¨Âêê‰∫ÜÔºå‰∏çÁü•ÈÅìÊòØ‰∏çÊòØÊâìÂºÄÊñπÂºèÊúâÈóÆÈ¢òÔºåÊÄª‰πãÈÄ†Âá∫Êù•‰πãÂêéÂ∞±Ê≤°Á¢∞ËøáÂá†ÂõûÔºåÂÆÅÊÑøËµ∞Ë∑ØÈÉΩ‰∏çÊÉ≥ÂºÄ„ÄÇÈô§Ê≠§‰πãÂ§ñËøòÊúâ‰∫õÂÖ∂‰ªñÂΩ±Âìç‰ΩìÈ™åÁöÑÁªÜËäÇÔºåÊÑüËßâÂíåÂÖ∂‰ªñÂá†‰∏™Êé•Ëß¶‰∫Ü‰∏ÄÊÆµÊó∂Èó¥ÁöÑ‰ª• steam alpha Ê®°ÂºèÂºÄÂèëÁöÑ‰ΩúÂìÅÁ±ª‰ººÔºåÂéÇÂÆ∂<del>Â∞è‰ΩúÂùä</del>ÂÅö‰∫ÜÊñ∞Â•áÁöÑÊ†∏ÂøÉÁé©Ê≥ïÔºå‰ΩÜÊòØ‰∏çÁü•ÈÅìÂ¶Ç‰ΩïÊõ¥Ëøõ‰∏ÄÊ≠•Âú∞ÂÆåÂñÑÂπ∂ÁªßÁª≠ÊåñÊéò‰∏∞ÂØåÁöÑÂÜÖÂÆπ„ÄÇÊúÄÂêéÁªôÊàëÁöÑÊÑüËßâÂ∞±ÊòØÂºÄÂßãÂæàÊñ∞Â•áÂæà‰∏äÂ§¥Ôºå‰ΩÜÊòØÁé©ÁùÄÂÆåÁùÄÂ∞±ÊÄªÊòØÊÑüËßâÂ∑Æ‰∫Ü‰∫õ‰∏úË•ø„ÄÇ</p><p>ÊúÄÂêéÊÄªÁªìÁöÑËØùÂ∞±ÊòØ<del>ÊäõÊéâ‰∏çÂ•ΩÁöÑ‰ΩìÈ™åÊù•ËØ¥‰ΩìÈ™åËøòÊòØÂèØ‰ª•ÁöÑ</del>Áïô‰∏Ä‰∏™Âú®Êµ∑‰∏≠ÂÜíÈô©ÁöÑÊ®°Á≥äÂç∞Ë±°ÊòØ‰∏çÈîôÁöÑÔºå‰ΩÜÊòØ‰∏çÂ§™Â•ΩÁöÑÊ∏∏Áé©‰ΩìÈ™åËÆ©Êàë‰∏çÂ§™ÊÉ≥ÁªßÁª≠Êìç‰Ωú‰∏ãÂéªÂÆåÊàêÂêéÈù¢ÁöÑÂâßÊÉÖ„ÄÇ</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ËøôÊòØÁ≥ªÂàóÁ¨¨‰∫å‰Ωú„ÄÇ‰ΩÜÊòØ‰ªé‰∏Ä‰∫õ‰πãÂâçÁöÑËµÑÊñôÊù•Áúã‰∏ÄÂºÄÂßãÂÜ∞ÁÇπ‰πã‰∏ãÊòØ‰Ωú‰∏∫Á¨¨‰∏ÄÈÉ®ÁöÑ DLC ÁöÑË∫´‰ªΩÈù¢‰∏ñÁöÑÔºå‰∏çËøáÊàëÂú® xbox ÂïÜÂ∫óÁúãÂà∞ÁöÑÊó∂ÂÄôÂÆÉÂ∑≤ÁªèÂíå„ÄäÊ∑±Êµ∑Ëø∑Ëà™„ÄãÂàÜÂºÄÊàê‰∏§‰∏™Êù°ÁõÆ‰∫ÜÔºå‰πüËÆ∏ÊòØÂÅöÁùÄÂÅöÁùÄÂ∞±ÊãøÂá∫Êù•ÂçïÁã¨ÂîÆÂçñ‰∫ÜÂêß„ÄÇ‰∏çËøáÂèØËÉΩÊòØËøô‰∏™ÂéüÂõ†ÔºåÂÜ∞ÁÇπ‰πã‰∏ãÂ§ßÈÉ®ÂàÜÁöÑÂÖÉÁ¥†Âü∫Êú¨Âíå‰πãÂâç‰∏ÄÊ®°‰∏ÄÊ†∑ÔºåÁîªÈù¢ÂíåÊìç‰ΩúÈÉΩÊòØ</summary>
      
    
    
    
    
    <category term="Experience" scheme="https://waynexia.github.io/tags/Experience/"/>
    
    <category term="Game" scheme="https://waynexia.github.io/tags/Game/"/>
    
  </entry>
  
  <entry>
    <title>Paper Reading: Adaptive Radix Tree</title>
    <link href="https://waynexia.github.io/2020/07/adaptive-radix-tree/"/>
    <id>https://waynexia.github.io/2020/07/adaptive-radix-tree/</id>
    <published>2020-07-13T21:45:12.000Z</published>
    <updated>2023-01-02T06:28:43.260Z</updated>
    
    <content type="html"><![CDATA[<h1 id="‰ªÄ‰πàÊòØ-ART"><a href="#‰ªÄ‰πàÊòØ-ART" class="headerlink" title="‰ªÄ‰πàÊòØ ART ?"></a>‰ªÄ‰πàÊòØ ART ?</h1><p>ART ÊòØ‰∏Ä‰∏™ËÉΩÊèê‰æõÈ´òÊïàÁÇπÁöÑÂ¢ûÂà†Êü•ÊîπÔºå‰ª•ÂèäËåÉÂõ¥Êü•ËØ¢ÁöÑÁ¥¢ÂºïÁªìÊûÑ„ÄÇÊòØ‰∏Ä‰∏™ÊúâÂ∫èÁöÑÊò†Â∞Ñ„ÄÇÂêçÁß∞‰∏≠ÁöÑ radix Ë°®Á§∫ËøôÊòØ‰∏ÄÈ¢óÁî®Âü∫Êï∞Êù•ÊûÑÂª∫ÁöÑÁªìÊûÑÔºåÂÜÖÈÉ®Êï∞ÊçÆÊòØÊúâÂ∫èÂ≠òÂÇ®ÁöÑÔºåÊâÄ‰ª•ÊúâÈ´òÊïàËåÉÂõ¥Êü•ËØ¢ÁöÑËÉΩÂäõ„ÄÇÁõ∏ÊØî‰∫éÂÖ∂‰ªñÂ∏∏ËßÅÁöÑÂü∫Êï∞ÁªìÊûÑÔºåART ÁöÑÁ©∫Èó¥Âà©Áî®ÁéáÊõ¥È´ò„ÄÇËøôÂæóÁõä‰∫éÂÆÉ adaptive ÁöÑÁâπÊÄßÔºåÂç≥ËÉΩÂ§üÊ†πÊçÆÁ©∫Èó¥‰ΩøÁî®ÊÉÖÂÜµÂä®ÊÄÅÂú∞Ë∞ÉËäÇËäÇÁÇπÂ§ßÂ∞è„ÄÇ</p><img class="url&#x3D;.&#x2F;1.png title&#x3D;Compare to HashTable"><h1 id="Âü∫Êï∞Ê†ë"><a href="#Âü∫Êï∞Ê†ë" class="headerlink" title="Âü∫Êï∞Ê†ë"></a>Âü∫Êï∞Ê†ë</h1><p>ÊòØtrieÊ†ëÁöÑ‰∏ÄÁßç„ÄÇËøôÁßçÊï∞ÊçÆÁªìÊûÑÊâÄÂÇ®Â≠òÁöÑ‰ø°ÊÅØÂπ∂‰∏çÂú®Êüê‰∏™ËäÇÁÇπ‰∏äÔºåËÄåÊòØÁî±‰∏ÄÊù°Áî±Ê†πÂà∞Âè∂ËäÇÁÇπÁöÑË∑ØÂæÑÊâÄË°®Á§∫ÔºàÂΩìÁî®‰ΩúÊò†Â∞ÑÁöÑÊó∂ÂÄôÈÄöÂ∏∏‰∏∫ÈîÆÁöÑ‰ø°ÊÅØÂÇ®Â≠òÂú®Ë∑ØÂæÑ‰∏äÔºåÂÄºÁöÑ‰ø°ÊÅØÂ≠ò‰∫éÂØπÂ∫îÁöÑÂè∂ËäÇÁÇπÔºâ„ÄÇ</p><img class="url&#x3D;2.png title&#x3D;An ART"><h1 id="Adaptive-Node"><a href="#Adaptive-Node" class="headerlink" title="Adaptive Node"></a>Adaptive Node</h1><p>ART ‰ΩøÁî®ËÉΩÂä®ÊÄÅË∞ÉËäÇÂ§ßÂ∞èÔºàËá™ÈÄÇÂ∫î adaptiveÔºâÁöÑËäÇÁÇπ‰Ωú‰∏∫ÂÜÖÈÉ®Ê†ëËäÇÁÇπÔºåËÉΩÂ§üÊèêÈ´òÂÜÖÂ≠ò‰ΩøÁî®Áéá„ÄÇDBMS ‰∏≠Â∏∏ËßÅÁöÑÊúâÂ∫èÁ¥¢ÂºïÊï∞ÊçÆÁªìÊûÑB-treeÊàñËÄÖ‰º†ÁªüÁöÑradix treeÂõ†‰∏∫ÊØè‰∏™ËäÇÁÇπÁöÑÂ§ßÂ∞èÊòØÂõ∫ÂÆöÁöÑÔºåÂõ†Ê≠§Â≠òÂú®Á©∫Èó¥ÊîæÂ§ßÁöÑÈóÆÈ¢ò„ÄÇÁ±ª‰ºº‰∫éÁ£ÅÁõòÊàñÂÜÖÂ≠òÈ°µË°®ÁöÑÂ§ßÂ∞èÔºåËäÇÁÇπÁöÑÂ§ßÂ∞èÈÄöÂ∏∏ÈúÄË¶ÅÂèñËàçÔºåËäÇÁÇπÂ§™Â§ßÁöÑËØùÊµ™Ë¥πÂæà‰∏•ÈáçÔºåËäÇÁÇπÂ§™Â∞èË∑ØÂæÑÂèàÂæàÈïøÔºåÂΩ±ÂìçËØªÂÜôÊïàÁéá„ÄÇ</p><img class="url&#x3D;3.png"><p>ËôΩÁÑ∂ÁêÜËÆ∫‰∏äËØ¥ËÉΩÂ§ü‰ΩøÁî®Âä®ÊÄÅÊï∞ÁªÑ‰Ωú‰∏∫ÂÜÖÈÉ®ËäÇÁÇπÔºå‰ΩÜÊòØËøôÊ†∑‰ºöÊ∂âÂèäÂà∞È¢ëÁπÅÁöÑÂÜÖÂ≠òÂàÜÈÖçÈáäÊîæ„ÄÇ‰∏∫‰∫ÜËß£ÂÜ≥Ëøô‰∏™ÈóÆÈ¢òÔºåARTÂ∞ÜËäÇÁÇπÁöÑÂ§ßÂ∞èÂõ∫ÂÆö‰∏∫‰∫ÜÂõõÁßç„ÄÇÂàÜÂà´‰∏∫4„ÄÅ16„ÄÅ48‰ª•Âèä256„ÄÇÂπ∂‰∏îÊØè‰∏™ËäÇÁÇπÊ†πÊçÆÂ§ßÂ∞èÔºåÂú®ÂÖ∑‰ΩìÁöÑÁªìÊûÑ‰ª•ÂèäË°å‰∏∫‰∏ä‰ºöÊúâÁªÜÂæÆ‰∏çÂêå</p><h1 id="ÂõõÁßçËäÇÁÇπÁöÑÂÖ∑‰ΩìÂÆûÁé∞"><a href="#ÂõõÁßçËäÇÁÇπÁöÑÂÖ∑‰ΩìÂÆûÁé∞" class="headerlink" title="ÂõõÁßçËäÇÁÇπÁöÑÂÖ∑‰ΩìÂÆûÁé∞"></a>ÂõõÁßçËäÇÁÇπÁöÑÂÖ∑‰ΩìÂÆûÁé∞</h1><p>È¶ñÂÖàËäÇÁÇπÁ±ªÂûãÁöÑÂèòÂåñ‰ªÖÂèëÁîüÂú®‰∏äÊ∫¢ÊàñËÄÖ‰∏ãÊ∫¢Êó∂ÔºåÂç≥ÂèØ‰ª•/ÈúÄË¶Å‰ΩøÁî®Âè¶‰∏ÄÁßçÁ±ªÂûãÁöÑËäÇÁÇπÊù•‰ª£Êõø„ÄÇÈúÄË¶ÅÊ≥®ÊÑèÁî±‰∫éÂâçÁºÄÊ†ëÁöÑÁâπÊÄßÔºå‰∏Ä‰∏™ËäÇÁÇπÁöÑÊúÄÂ§ßÂÆΩÂ∫¶ÊòØÊúâÈôêÁöÑÔºåÂõ†Ê≠§Âπ∂‰∏ç‰ºöÊ®™ÂêëÂàÜË£ÇÊàê‰∏§‰∏™ËäÇÁÇπ„ÄÇ</p><h2 id="Node4-‰∏é-Node16"><a href="#Node4-‰∏é-Node16" class="headerlink" title="Node4 ‰∏é Node16"></a>Node4 ‰∏é Node16</h2><img class="url&#x3D;4.png title&#x3D;Node4 and Node16"><p>Node4 ‰∏é Node16 Âú®ÁªìÊûÑ‰∏äÈù¢ÊòØÁ±ª‰ººÁöÑÔºåÈÉΩÊòØÁî±‰∏ÄÂØπÊï∞ÈáèÁõ∏Á≠âÁöÑÊï∞ÁªÑÁªÑÊàêÔºåÂÖ∂‰∏≠‰∏Ä‰∏™Â≠òÊîæÈîÆÔºåÂè¶‰∏Ä‰∏™Â≠òÊîæÊåáÈíà„ÄÇ</p><h2 id="Node48"><a href="#Node48" class="headerlink" title="Node48"></a>Node48</h2><img class="url&#x3D;5.png title&#x3D;Node48"><p>Node48 ‰∏éÂâç‰∏§Áßç‰∏ÄÊ†∑‰πüÊòØÁî±‰∏§‰∏™Êï∞ÁªÑÁªÑÊàêÔºå‰∏çËøáÂ≠òÂÇ®ÈîÆÁöÑÊï∞ÁªÑÊúâ256ÁöÑÂÆπÈáèÔºåÂèØ‰ª•Áõ¥Êé•ÈÄöËøá‰∏ãÊ†áËøõË°åÁ¥¢Âºï„ÄÇ</p><h2 id="Node256"><a href="#Node256" class="headerlink" title="Node256"></a>Node256</h2><img class="url&#x3D;6.png title&#x3D;Node256"><p>Node256‰∏éNode48Áõ∏ÊØîÂÖ∂ÂÆûÂ∞±ÊòØÁ¨¨‰∫å‰∏™Êï∞ÁªÑÁöÑÂ§ßÂ∞è‰πüÊù•Âà∞‰∫Ü256ÔºåÈîÆ‰∏éÂÄºÊúâÊª°Â∞ÑÁöÑÂÖ≥Á≥ªÔºåÂèØ‰ª•ÁúÅÁï•‰∏ÄÊ¨°Á¥¢Âºï„ÄÇ</p><h1 id="Ë∑ØÂæÑÂéãÁº©"><a href="#Ë∑ØÂæÑÂéãÁº©" class="headerlink" title="Ë∑ØÂæÑÂéãÁº©"></a>Ë∑ØÂæÑÂéãÁº©</h1><p>Êñá‰∏≠Â∞ÜË∑ØÂæÑÂéãÁº©ÂàÜÊàê‰∫Ü‰∏§ÁßçÊÉÖÂÜµÔºåÂàÜÂà´ÊòØ path compression Âíå lazy expansion„ÄÇ path compression ÊåáÂ∞ÜÂè™Êúâ‰∏Ä‰∏™ key ÁöÑËäÇÁÇπÂæÄ‰∏ãÂêàÂπ∂ÔºåÁõ¥Âà∞ÈúÄË¶ÅÂå∫ÂàÜÂ§ö‰∏™Â≠êËäÇÁÇπ‰∏∫Ê≠¢„ÄÇlazy expansion Ë°®Á§∫Êää‰∏Ä‰∏™ËäÇÁÇπË∑ØÂæÑ‰∏äÊ≤°ÊúâÂàÜÂèâÁöÑÈÉ®ÂàÜÊäòÂè†Ëµ∑Êù•„ÄÇ</p><img class="url&#x3D;7.png title&#x3D;Two ways of path compression"><p>Êó¢ÁÑ∂Ë∑ØÂæÑË¢´ÂéãÁº©ÔºåÈÇ£‰πàÂú®Êü•ÊâæÁöÑÊó∂ÂÄô‰πüÈúÄË¶ÅÂú®ÊØîËæÉ key Êó∂ËøõË°åÁõ∏Â∫îÁöÑÂ§ÑÁêÜ„ÄÇÊñá‰∏≠Â∞ÜÂ§ÑÁêÜÂàÜ‰∏∫‰∫Ü‰∏§Á±ª„ÄÇÊÇ≤ËßÇÁöÑÊñπÂºèÊòØËäÇÁÇπÂÇ®Â≠ò‰∏Ä‰∏™ÈïøÂ∫¶‰∏çÂÆöÁöÑÂâçÁºÄÂÄºÔºåÂú®ÊØèÊ¨°‰∏ãÈôçÂú∞Êó∂ÂÄô‰ΩøÁî®Ëøô‰∏™ÂÄºËøõË°åÊØîËæÉ„ÄÇ‰πêËßÇÂú∞ÊñπÂºèÊòØËäÇÁÇπÂè™ÂÇ®Â≠òË¢´ÂéãÁº©Âú∞ÂâçÁºÄÂú∞ÈïøÂ∫¶ÔºåÂú®ÊØèÊ¨°‰∏ãÈôçËøáÁ®ã‰∏≠Áõ¥Êé•Ë∑≥ËøáËøô‰∏™ÈïøÂ∫¶ÁöÑ key ÁöÑÂ§ÑÁêÜÔºåÂπ∂Âú®ÊúÄÂêéËææÂà∞Âè∂Â≠êËäÇÁÇπÊó∂ÂÜçÊØîËæÉ key ÊòØÂê¶Áõ∏Á≠â„ÄÇÊñá‰∏≠ÁöÑËäÇÁÇπÂ∞ÜËøô‰∏§ÁßçÊñπÂºèÁªÑÂêàËµ∑Êù•ÔºåÂú®‰∏ãÈôçÁöÑÊó∂ÂÄôÊåâÁÖßÂâçÁºÄÈïøÂ∫¶ËøõË°åÂä®ÊÄÅÂ§ÑÁêÜ„ÄÇ</p><h1 id="ËäÇÁÇπ-header"><a href="#ËäÇÁÇπ-header" class="headerlink" title="ËäÇÁÇπ header"></a>ËäÇÁÇπ header</h1><p>‰∏Ä‰∏™ËäÇÁÇπÈô§‰∫ÜËá™Â∑±ÁöÑÊï∞ÊçÆÂüü‰πãÂ§ñÔºåËøòÂåÖÂê´‰∫Ü‰∏Ä‰∫õÂÖÉ‰ø°ÊÅØ„ÄÇ‰æãÂ¶ÇËäÇÁÇπÁöÑÁ±ªÂûãÔºåÂÆûÈôÖÂÆπÈáèÔºåÂéãÁº©ÁöÑË∑ØÂæÑÔºàÂâçÁºÄÂíå / ÊàñÂâçÁºÄÁöÑÈïøÂ∫¶ÔºâÁ≠â„ÄÇÂú®Êñá‰∏≠ÔºåËäÇÁÇπÊúâÂÖ´Â≠óËäÇÁöÑÂâçÁºÄÂå∫Âüü‰ª•ÂèäÂõõÂ≠óËäÇÁöÑÂâçÁºÄÈïøÂ∫¶ÂüüÔºåÂç≥‰∏ä‰∏ÄÊÆµÊèêÂà∞ÁöÑÊÇ≤ËßÇ‰∏é‰πêËßÇÁõ∏ÁªìÂêàÁöÑÂ§ÑÁêÜÊñπÊ≥ï„ÄÇ</p><h1 id="ËØªÂÜôÊìç‰Ωú"><a href="#ËØªÂÜôÊìç‰Ωú" class="headerlink" title="ËØªÂÜôÊìç‰Ωú"></a>ËØªÂÜôÊìç‰Ωú</h1><h2 id="Êü•ËØ¢"><a href="#Êü•ËØ¢" class="headerlink" title="Êü•ËØ¢"></a>Êü•ËØ¢</h2><p>ÂØπ‰∫é Node4 ÈááÁî®ÈÅçÂéÜÁöÑÊñπÊ≥ïÔºåNode16 ‰ΩøÁî® SIMD ÊàñËÄÖ‰∫åÂàÜÊù•ÊØîËæÉÂΩìÂâçÁöÑ keyÔºåNode48 ‰∏é Node256 ÂàÜÂà´Âè™ÈúÄËøõË°å‰∏§Ê¨° / ‰∏ÄÊ¨°Á¥¢ÂºïÂ∞±ËÉΩÂØπÊØîÂà∞ÂâçÁºÄËøõË°å‰∏ãÈôç„ÄÇ<br>‰∏Ä‰∏™‰∏ÄËà¨ÁöÑÊü•ËØ¢ÊµÅÁ®ã‰∏∫ÊâæÂà∞ÂØπÂ∫îÁöÑËäÇÁÇπËøõË°å‰∏ãÈôçÊàñËøîÂõûÂÆåÊàêÊü•ÊâæÔºåÂØπ‰∫é‰∏çÂ≠òÂú®ÁöÑÈîÆÊàñËÄÖËäÇÁÇπËøîÂõûÁ©∫„ÄÇÂè¶Â§ñÁî±‰∫é path compression ÁöÑÂ≠òÂú®ÔºåÂèØËÉΩ‰∏ÄÊ¨°‰∏ãÈôç‰ºöÂÆåÊàêÂ§ö‰∏™ bytes ÁöÑÊØîËæÉ„ÄÇ<br>ËÄå range scan ÂèØ‰ª•‰ΩøÁî®Á±ª‰ººÊ∑±ÊêúÁöÑÊï∞Ê¨°Êü•ËØ¢ÂÆûÁé∞„ÄÇ</p><h2 id="ÊèíÂÖ•-Âà†Èô§"><a href="#ÊèíÂÖ•-Âà†Èô§" class="headerlink" title="ÊèíÂÖ• / Âà†Èô§"></a>ÊèíÂÖ• / Âà†Èô§</h2><p>‰∏ÄËà¨‰∏Ä‰∏™ key ÁöÑÊèíÂÖ•ÊàñÂà†Èô§ÂèØËÉΩÂá∫Áé∞Âá†ÁßçÁâπÊÆäÊÉÖÂÜµ„ÄÇÂèëÁîü‰∏äÊ∫¢/‰∏ãÊ∫¢Êó∂ÈúÄË¶ÅËøõË°åËäÇÁÇπÁöÑÊõøÊç¢Êù•ÂÆåÊàêÊâ©/Áº©ÂÆπÔºõÂ¶ÇÊûú‰∏ÄÊ¨°Êâ©Áº©ÂÆπËß¶Âèë‰∫ÜË∑ØÂæÑÂéãÁº©ÔºåÈÇ£‰πà‰ºöÊúâÂÜÖÈÉ®ËäÇÁÇπÁöÑÊñ∞Â¢ûÊàñÂà†Èô§Ôºå‰ª•ÂèäËäÇÁÇπÂÖÉ‰ø°ÊÅØÈáåÂâçÁºÄÊï∞ÊçÆÁöÑË∞ÉÊï¥„ÄÇ<br>Â¶ÇÊûú‰∏ÄÊ¨°Êâ©ÂÆπÁöÑËäÇÁÇπÊòØ lazy expansion ÁöÑÔºåÊàñËÄÖÁº©ÂÆπÂØºËá¥ËäÇÁÇπÁöÑÂÆûÈôÖÂÆπÈáèÂèò‰∏∫1ÔºåÈÇ£‰πàËøôÊù°Ë∑ØÂæÑÁöÑÈïøÂ∫¶‰ºöÂèëÁîüÂèòÂåñÔºà‰ª•ÊèíÂÖ•‰∏∫‰æãÔºå‰ΩøÁî®‰∏Ä‰∏™Êñ∞ËäÇÁÇπÊõøÊç¢ÂΩìÂâçÁöÑÂè∂Â≠êËäÇÁÇπÔºåËøô‰∏™Êñ∞ËäÇÁÇπÊúâ‰∏§‰∏™Âè∂Â≠êËäÇÁÇπÔºåÂàÜÂà´‰∏∫‰πãÂâçÁöÑ‰ª•ÂèäÊñ∞Â¢ûÁöÑÔºåËäÇÁÇπÁöÑÂâçÁºÄ‰πü‰ºöÂèòÊàê‰∏§‰∏™Âè∂Â≠êËäÇÁÇπÁöÑ key ÁöÑÈáçÂêàÈÉ®ÂàÜÔºâÔºõÂ¶ÇÊûúÊñ∞ÊèíÂÖ•ËäÇÁÇπÁöÑ key ‰ºöÂΩ±Âìç‰∏Ä‰∏™ËäÇÁÇπÁöÑÂâçÁºÄÔºåÈÇ£‰πà‰πü‰ºöÂú®ËØ•ËäÇÁÇπ‰∏äÈù¢Êñ∞Â¢û‰∏Ä‰∏™ inner ËäÇÁÇπÔºåÂπ∂Áõ∏Â∫îÂú∞Ë∞ÉËäÇÂâçÁºÄÔºõÂÖ∂‰ªñÁöÑÊÉÖÂÜµÂè™ÈúÄË¶ÅËøõË°åÁÆÄÂçïÁöÑÊèíÂÖ•Âà†Èô§Â∞±Ë°å‰∫Ü„ÄÇÂèØ‰ª•ÁúãÂà∞ÔºåÂú®‰∏äËø∞Âá†ÁßçÊÉÖÂÜµ‰∏≠Ôºå‰∏ÄÊ¨°Â¢ûÂà†ËøáÁ®ã‰∏≠‰ºöÂèóÂà∞ÂΩ±ÂìçÁöÑËäÇÁÇπÊúÄÂ§ö‰ªÖÊúâ‰∏§‰∏™„ÄÇ</p><h1 id="Êï∞ÊçÆË°®Á§∫"><a href="#Êï∞ÊçÆË°®Á§∫" class="headerlink" title="Êï∞ÊçÆË°®Á§∫"></a>Êï∞ÊçÆË°®Á§∫</h1><p>‰∏∫‰∫ÜÂÆûÁé∞Êï∞ÊçÆÊúâÂ∫èÊéíÂàóÔºåÈúÄË¶ÅËÉΩÂ∞ÜÊï∞ÊçÆÁ±ªÂûãË°®Á§∫Êàê‰∫åËøõÂà∂ÂèØÊØîËæÉÔºàbinary comparableÔºâÁöÑÂΩ¢Âºè„ÄÇ<br>Êó†Á¨¶Âè∑Êï¥ÂûãÂ§©ÁÑ∂Êª°Ë∂≥Ë¶ÅÊ±ÇÔºåÂè™ÊòØÈúÄË¶ÅÊ≥®ÊÑèÂ§ßÂ∞èÁ´Ø„ÄÇÊúâÁ¨¶Âè∑Êï¥ÂûãÈúÄË¶ÅÂÅö‰∏ÄÊ¨°ÂºÇÊàñÊìç‰ΩúÊù•Â§ÑÁêÜË°•Á†ÅË°®Á§∫Ê≥ï„ÄÇÊµÆÁÇπÊï∞Á®çÂæÆÂ§çÊùÇ‰∏Ä‰∫õÔºåÊåâÁÖß [ Ê≠£ÔºåË¥ü ] x [ ËßÑÊ†ºÂåñ„ÄÅÈùûËßÑÊ†ºÂåñ„ÄÅNaN„ÄÅ‚àû„ÄÅ0 ] ÂàÜ‰∏∫‰∫í‰∏çÈáçÂè†ÁöÑÂçÅÁ±ªÔºåÁÑ∂ÂêéÈáçÊñ∞Áªô rank„ÄÇÂØπ‰∫éÂ≠óÁ¨¶‰∏≤Êúâ Unicode ÂÆö‰πâÁöÑÊØîËæÉÁÆóÊ≥ï„ÄÇ</p><h1 id="Â∫îÁî®"><a href="#Â∫îÁî®" class="headerlink" title="Â∫îÁî®"></a>Â∫îÁî®</h1><p>Âú®Êú¨ÊñáÁöÑ benchmark ‰∏≠ÂèØ‰ª•ÁúãÂà∞ÔºåÂΩìÊï∞ÊçÆÁöÑ key ÂàÜÂ∏ÉÊØîËæÉÂØÜÈõÜÊó∂ÔºåART ÊúâÁùÄÂæà‰ºòÁßÄÁöÑË°®Áé∞„ÄÇËÄå‰∏îÈô§‰∫Ü range scan ËåÉÂõ¥ËØª‰πãÂ§ñÔºåART ÁöÑ bulk load ËåÉÂõ¥ÂÜô‰πüÊúâÂæàÂ§ßÁöÑÂèëÊéòÁ©∫Èó¥„ÄÇ</p><h1 id="Âπ∂Âèë"><a href="#Âπ∂Âèë" class="headerlink" title="Âπ∂Âèë"></a>Âπ∂Âèë</h1><p>ÊñáÁ´†‰ªãÁªç‰∫Ü‰∏§ÁßçÂπ∂ÂèëÊñπÊ°àÔºåÂàÜÂà´ÊòØ Optimistic Lock Coupling Âíå Read-Optimized Write EXclusion (ROWEX)„ÄÇÂÆÉ‰ª¨ÁöÑÊÄßËÉΩÂæàÊé•Ëøë„ÄÇ</p><img class="url&#x3D;8.png title&#x3D;Comparison of serval concurrency schemas"><h2 id="Optimistic-Lock-Coupling"><a href="#Optimistic-Lock-Coupling" class="headerlink" title="Optimistic Lock Coupling"></a>Optimistic Lock Coupling</h2><p>ÊòØÂú®‰º†Áªü Lock Coupling ÊñπÊ°à‰∏äÁöÑ‰∏ÄÁßç‰ºòÂåñ„ÄÇLock Coupling ÁöÑÈáçÁÇπÂú®‰∫é‰∏Ä‰∏™Êìç‰ΩúÂêåÊó∂ÊúÄÂ§öÊåÅÊúâ‰∏§ÊääÈîÅÔºåÊòØÁ∫øÁ®ãÂêåÊ≠• B-Tree ÁöÑÂ∏∏ËßÅÂÅöÊ≥ï„ÄÇÂπ∂‰∏îÂú® ART ÁöÑËÉåÊôØ‰∏ãÔºå‰∏ÄÊ¨°‰øÆÊîπÊúÄÂ§öÂè™‰ºöÂΩ±ÂìçÂà∞‰∏§‰∏™ËäÇÁÇπÔºåÈùûÂ∏∏ÈÄÇÂêà‰ΩøÁî® Lock Coupling Êù•ÂÆûÁé∞Âπ∂Âèë„ÄÇ‰ΩÜÊòØ Lock Coupling Âõ†‰∏∫ÊØèÊ¨°ÂèñÂæó‰∏ÄÊääÈîÅÈÉΩ‰ºö‰øÆÊîπËäÇÁÇπÁöÑÂÜÖÂÆπÔºåÊâÄ‰ª•ÂØπÁºìÂ≠òÂæà‰∏çÂèãÂ•ΩÔºåÂØºËá¥ÂÖ∂ÊïàÁéá‰Ωé‰∏ã„ÄÇÂú®ËøôÈáåÈááÁî®‰∏ÄÁßç Optimistic ÁöÑÂÅöÊ≥ïÔºåÂç≥ÂÅáËÆæÂÜ≤Á™ÅÂæàÂ∞ëÂá∫Áé∞ÔºåÊØèÊ¨°Âè™Âú®ËØªÂÆå‰πãÂêéÊ£ÄÊµãÁâàÊú¨‰ø°ÊÅØÊù•Âà§Êñ≠ÊúâÊ≤°ÊúâËØªÂà∞ËøáÊó∂‰ø°ÊÅØÔºåËÄåÈùûÈ¢ÑÂÖà‰∏äÈîÅÊù•Á°Æ‰øù‰∫íÊñ•„ÄÇÂ¶ÇÊûúÊ£ÄÊµãÂà∞‰∫ÜËøáÊúü‰ø°ÊÅØÂàôËøõË°åÈáçËØïÔºå‰∏∫‰∫ÜÈò≤Ê≠¢È•øÊ≠ªÂèØ‰ª•Âú®Ëã•Âπ≤Ê¨°ÈáçËØïÂ§±Ë¥•‰πãÂêéËøõË°åÂä†ÈîÅ„ÄÇ</p><h2 id="ROWEX"><a href="#ROWEX" class="headerlink" title="ROWEX"></a>ROWEX</h2><p>ÂàôÁ®çÂæÆÂ§çÊùÇ‰∏ÄÁÇπÔºåÂÆÉË¶ÅÊ±Ç writer ÈÄöËøáÂéüÂ≠êÊìç‰ΩúÊù•‰øùËØÅ reader ‰∏ç‰ºöÂá∫Áé∞ËÑèËØª„ÄÇËøô‰∏™ÊñπÊ≥ï‰πü‰ΩøÁî®Âà∞‰∫ÜÈîÅÔºå‰∏çËøá‰ªÖÈíàÂØπ writer Êèê‰æõ‰∫íÊñ•ÊÄßÔºåËÄåËØªÊìç‰ΩúÊòØ wait-free Âπ∂‰∏î‰∏é Optimistic Lock Coupling ‰∏çÂêåÔºåÊòØ‰øùËØÅÊàêÂäüÁöÑ„ÄÇ</p><h1 id="Bench"><a href="#Bench" class="headerlink" title="Bench"></a>Bench</h1><p><a target="_blank" rel="noopener" href="https://dbis-informatik.uibk.ac.at/sites/default/files/2018-06/hot-height-optimized.pdf">HOT (SIGMOD 2018)</a> appendix A ÊúâÊØîËæÉÂÖ®Èù¢ÁöÑ Cross Validation„ÄÇTL; DR. Âú®Êï∞ÊçÆÂØÜÈõÜÊü•ËØ¢ÊØîÊâ´ÊèèÂ§öÔºåÂÜôÊìç‰ΩúÊØîÈáçËæÉÂ§öÁöÑÊÉÖÂÜµ‰∏ã ART ÊúâÂæà‰ºòÁßÄÁöÑË°®Áé∞ÔºåÁ∫ØÊâ´Ë°®ÊÄßËÉΩÂπ∂‰∏çÊØî B-Tree Â•Ω„ÄÇÂ§ßÈáèÂØÜÈõÜÊï∞ÊçÆÁÇπÊü•Ë°®Áé∞ÂèØ‰ª•Ë∂ÖËøá HashTableÔºå‰∏çËøáÊÄßËÉΩ‰ºöÂèóÂà∞Êï∞ÊçÆÂàÜÂ∏ÉÁöÑÂΩ±Âìç„ÄÇ</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;‰ªÄ‰πàÊòØ-ART&quot;&gt;&lt;a href=&quot;#‰ªÄ‰πàÊòØ-ART&quot; class=&quot;headerlink&quot; title=&quot;‰ªÄ‰πàÊòØ ART ?&quot;&gt;&lt;/a&gt;‰ªÄ‰πàÊòØ ART ?&lt;/h1&gt;&lt;p&gt;ART ÊòØ‰∏Ä‰∏™ËÉΩÊèê‰æõÈ´òÊïàÁÇπÁöÑÂ¢ûÂà†Êü•ÊîπÔºå‰ª•ÂèäËåÉÂõ¥Êü•ËØ¢ÁöÑÁ¥¢ÂºïÁªìÊûÑ„ÄÇÊòØ‰∏Ä‰∏™ÊúâÂ∫èÁöÑÊò†Â∞Ñ„ÄÇÂêçÁß∞‰∏≠ÁöÑ r</summary>
      
    
    
    
    
    <category term="Paper Reading" scheme="https://waynexia.github.io/tags/Paper-Reading/"/>
    
  </entry>
  
</feed>
